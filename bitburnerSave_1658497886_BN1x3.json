{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":181,\"hp\":10,\"max_hp\":10,\"strength\":4,\"defense\":4,\"dexterity\":4,\"agility\":4,\"charisma\":11,\"intelligence\":0,\"hacking_chance_mult\":1.24,\"hacking_speed_mult\":1.24,\"hacking_money_mult\":1.24,\"hacking_grow_mult\":1.24,\"hacking_exp\":49393.6714077621,\"strength_exp\":41.044620000001714,\"defense_exp\":41.044620000001714,\"dexterity_exp\":41.044620000001714,\"agility_exp\":41.044620000001714,\"charisma_exp\":164.17848000000686,\"intelligence_exp\":0,\"hacking_mult\":1.24,\"strength_mult\":1.24,\"defense_mult\":1.24,\"dexterity_mult\":1.24,\"agility_mult\":1.24,\"charisma_mult\":1.24,\"hacking_exp_mult\":1.24,\"strength_exp_mult\":1.24,\"defense_exp_mult\":1.24,\"dexterity_exp_mult\":1.24,\"agility_exp_mult\":1.24,\"charisma_exp_mult\":1.24,\"company_rep_mult\":1.24,\"faction_rep_mult\":1.24,\"money\":36188466.829017274,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{\"FoodNStuff\":\"Part-time Employee\",\"Joe's Guns\":\"Part-time Employee\"},\"companyName\":\"Joe's Guns\",\"currentServer\":\"home\",\"purchasedServers\":[\"node\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":105,\"moneyGainRatePerSecond\":1990.1740991500092,\"onlineTimeSeconds\":42549.999999986125,\"ram\":64,\"totalMoneyGenerated\":6644037.867916711,\"name\":\"hacknet-node-0\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\"],\"factionInvitations\":[\"Sector-12\"],\"queuedAugmentations\":[],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":2,\"n\":1}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.24,\"crime_success_mult\":1.24,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"CyberSec\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.186,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.23019487179487177,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":107.35919999999874,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":129.68085333333315,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":25,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":144000,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.24,\"hacknet_node_money_mult\":1.24,\"hacknet_node_purchase_cost_mult\":0.76,\"hacknet_node_ram_cost_mult\":0.76,\"hacknet_node_core_cost_mult\":0.76,\"hacknet_node_level_cost_mult\":0.76,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"entropy\":0,\"lastUpdate\":1658497886306,\"lastSave\":1658497877507,\"totalPlaytime\":1469176600,\"playtimeSinceLastAug\":42778000,\"playtimeSinceLastBitnode\":42778000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-325632,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":75229167.45100817,\"hacknet\":6644037.867916711,\"hacknet_expenses\":-5053876.081659835,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":36187446.82901727,\"work\":136648.00000000824,\"servers\":-38242898.4082432,\"other\":-2200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-325632,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":75229167.45100817,\"hacknet\":6644037.867916711,\"hacknet_expenses\":-5053876.081659835,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":36187446.82901727,\"work\":136648.00000000824,\"servers\":-38242898.4082432,\"other\":-2200000,\"augmentations\":0}},\"scriptProdSinceLastAug\":34551903,\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1657029019692},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1657029079693},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1657032799693},{\"ID\":\"TOR\",\"unlockedOn\":1657034959684},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1657036879690},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1657043539693},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1657048999692},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1657066346295},{\"ID\":\"NITESEC\",\"unlockedOn\":1657164963304},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1657204697897},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1657204757898},{\"ID\":\"FROZE\",\"unlockedOn\":1657240227104},{\"ID\":\"TRAVEL\",\"unlockedOn\":1657290710985},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1657291430990},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1657418430996},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1657420771009},{\"ID\":\"4S\",\"unlockedOn\":1657422751007},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1657423111009},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1657423231010},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1657423771053},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1657424971001},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1657503733774},{\"ID\":\"DONATION\",\"unlockedOn\":1657541073076},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1657677527661},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1657680167662},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1657767499926},{\"ID\":\"SF1.1\",\"unlockedOn\":1657768519875}],\"terminalCommandHistory\":[\"weaken; weaken\",\"home\",\"connect n00dles\",\"analyze\",\"gome\",\"home\",\"run purchase-servers.js\",\"run aio.js -t 8 n00dles\",\"run purchase-servers.js\",\"connect darkweb\",\"buy -l\",\"home\",\"run auto-nuke.js\",\"scna-analyze\",\"scan-analyze\",\"run update.js\",\"run utilities/launch-grow.js\",\"run utilities/launch-weaken.js\",\"run oversight.js joesguns\",\"connect darkweb\",\"buy BruteSSH.exe\",\"home\",\"run auto-nuke.js\",\"scan-analyze\",\"scan-analyze 3\",\"run purchase-servers.js\",\"run batch-job.js node n00dles\",\"run update.js\",\"run purchase-servers.js\",\"run utilities/launch-grow.js\",\"run utilities/launch-weaken.js\",\"run aio -t 3 joesguns\",\"run aio.js -t 3 joesguns\",\"run oversight.js -t 3 joesguns\",\"run oversight.js -t 6 joesguns\",\"run aio.js -t 20 joesguns\",\"run aio.js -t 15 joesguns\",\"run auto-nuke.js\",\"connect darkweb\",\"buy -l\",\"buy FTPCrack.exe\",\"home\",\"run auto-nuke.js\",\"run update.js\",\"run auto-nuke.js\",\"run update.js\",\"scan-analyze 3\",\"connect harakiri-sushi ; connect CSEC\",\"backdoor\",\"home\"],\"identifier\":\"16a11c6272a5ae\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"95.9.0.3\",\"isConnectedTo\":true,\"maxRam\":64,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"AutoLink.exe-38.95%-INC\"],\"ramUsed\":56.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,150,0]},\"filename\":\"aio.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1395,\"onlineMoneyMade\":0,\"onlineRunningTime\":556.4099999999896,\"pid\":372,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":15,\"dependencies\":[{\"filename\":\"aio.js\",\"url\":\"blob:file:///b5af59a8-cc7e-42e5-a6d8-2ba165ef72e3\",\"moduleSequenceNumber\":205}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"node\",\"n00dles\"],\"dataMap\":{},\"filename\":\"batch-job.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24073.236000000124,\"onlineMoneyMade\":31961673,\"onlineRunningTime\":924.4100000000732,\"pid\":1047,\"ramUsage\":8.45,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"batch-job.js\",\"url\":\"blob:file:///6fb4682f-4559-44dc-8469-8e2fff3b2b51\",\"moduleSequenceNumber\":714003}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hackingChance: %s, percentMoney: %s\\\", server, (hackingChance*100).toFixed(2), (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.75) {\\r\\n\\t\\t\\tns.print(\\\"weakening \\\", server)\\r\\n\\t\\t\\tawait ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.75) {\\r\\n\\t\\t\\tns.print(\\\"growing \\\", server)\\r\\n\\t\\t\\tawait ns.grow(server);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tawait ns.hack(server);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/client/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/client/hack.js\",\"url\":\"blob:file:///dbccfe11-4b67-4c9f-b03e-86caf9a1bf65\",\"moduleSequenceNumber\":62808}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"home\",\"moduleSequenceNumber\":103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.grow(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"/client/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\t// ns.print(ns.args.length);\\r\\n\\twhile(true) {\\r\\n\\t\\tawait ns.weaken(ns.args[0])\\r\\n\\t}\\r\\n}\",\"filename\":\"/client/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { nukeHosts } from \\\"./utilities/scanHosts\\\";\\r\\n/** @param {NS} ns */\\r\\n\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"ALL\\\")\\r\\n    var nukeable = await nukeHosts(ns)\\r\\n    // ftpcrack 100\\r\\n    // relaysmtp 250\\r\\n    // httpworm 500\\r\\n    // sqlinject 750 \\r\\n    ns.print(nukeable)\\r\\n}\",\"filename\":\"auto-nuke.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utilities/scanHosts.js\",\"url\":\"blob:file:///6258f1b9-24ad-49d4-9d8f-11f31f2709e9\",\"moduleSequenceNumber\":109},{\"filename\":\"auto-nuke.js\",\"url\":\"blob:file:///da88aad0-07b2-48d5-95cb-85fa341d2682\",\"moduleSequenceNumber\":1644}],\"dependents\":[],\"ramUsage\":2.95,\"server\":\"home\",\"moduleSequenceNumber\":1644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\t// ns.tail()\\r\\n\\t// var maxRAM = ns.getPurchasedServerMaxRam()\\r\\n\\t// var maxCost = ns.getPurchasedServerCost(ns.getPurchasedServerMaxRam())\\r\\n\\t// var maxCount = ns.getPurchasedServerLimit()\\r\\n\\t// var maxInvestment = maxCost * maxCount\\r\\n\\t// ns.printf(\\\"max-ram: %s, max-cost: %s, max-servers: %s, max-investment: %s\\\", maxRAM, maxCost, maxCount, maxInvestment)\\r\\n\\t// var ram = Math.pow(2, 9)\\r\\n\\t// ns.printf(\\\"%s: $%smil\\\", ram, ns.getPurchasedServerCost(ram)/1000000)\\r\\n\\t// ns.tail()\\r\\n\\tconst prefix = \\\"node\\\";\\r\\n\\tconst playerMoney = ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n\\tconst serverCount = 1\\r\\n\\tfor (let i = 20; i >= 2; i--) {\\r\\n\\t\\tvar ramAmount = Math.pow(2, i)\\r\\n\\r\\n\\t\\tvar purchaseCost = ns.getPurchasedServerCost(ramAmount) * serverCount\\r\\n\\t\\tif (purchaseCost < playerMoney){\\r\\n\\t\\t\\tvar readableCost = purchaseCost/1000000\\r\\n\\t\\t\\tvar promptText = `Buy ${serverCount} servers for ${readableCost}m with ${ramAmount} RAM each?`\\r\\n\\t\\t\\tvar input = await ns.prompt(promptText)\\r\\n\\t\\t\\tif (input) {\\r\\n\\t\\t\\t\\tfor (let j = 1; j <= serverCount; j++) {\\r\\n\\t\\t\\t\\t\\tawait ns.purchaseServer(prefix, ramAmount)\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\tbreak\\r\\n\\t\\t};\\r\\n\\t}\\r\\n\\r\\n\\t// 2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2 // 1048576\\r\\n\\t// 2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2 // 524288\\r\\n\\t// 2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2 // 262144\\r\\n\\t// 2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2 // 131072\\r\\n\\t// 2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2 // 65536\\r\\n\\t// 2*2*2*2*2*2*2*2*2*2*2*2*2*2*2 // 32768\\r\\n\\t// 2*2*2*2*2*2*2*2*2*2*2*2*2*2 // 16384\\r\\n\\t// 2*2*2*2*2*2*2*2*2*2*2*2*2 // 8192\\r\\n\\t// 2*2*2*2*2*2*2*2*2*2*2*2 // 4096\\r\\n\\t// 2*2*2*2*2*2*2*2*2*2*2 // 2048\\r\\n\\t// 2*2*2*2*2*2*2*2*2*2 // 1024\\r\\n\\t// 2*2*2*2*2*2*2*2*2 // 512\\r\\n\\t// 2*2*2*2*2*2*2*2 // 256\\r\\n\\t// 2*2*2*2*2*2*2 // 128\\r\\n\\t// 2*2*2*2*2*2 // 64\\r\\n\\t// 2*2*2*2*2 // 32\\r\\n\\t// 2*2*2*2 // 16\\r\\n\\t// 2*2*2 // 8\\r\\n\\t// 2*2 //4\\r\\n\\r\\n\\t// const serverList = ns.getPurchasedServers()\\r\\n\\t// for (let i in serverList) {\\r\\n\\t// \\tif (ns.getServerMaxRam(serverList[i]) < 1048576){\\r\\n\\t// \\t\\tns.print(\\\"Deleting \\\", serverList[i])\\r\\n\\t// \\t\\tawait ns.killall(serverList[i])\\r\\n\\t// \\t\\tns.deleteServer(serverList[i])\\r\\n\\t// \\t}\\r\\n\\t// }\\r\\n\\t\\r\\n\\t// var i = 0\\r\\n\\t// for (i = 0; i < 25; ++i) {\\r\\n\\t// \\tns.purchaseServer(prefix, ram);\\r\\n\\t// }\\r\\n\\r\\n}\",\"filename\":\"purchase-servers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"purchase-servers.js\",\"url\":\"blob:file:///b30df557-6d13-45eb-acfa-da9109a60519\",\"moduleSequenceNumber\":316}],\"dependents\":[],\"ramUsage\":4.2,\"server\":\"home\",\"moduleSequenceNumber\":316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tns.sleep(initSleep)\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hackingChance: %s, percentMoney: %s\\\", server, (hackingChance*100).toFixed(2), (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.75) {\\r\\n\\t\\t\\tns.print(\\\"weakening \\\", server)\\r\\n\\t\\t\\tawait ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.75) {\\r\\n\\t\\t\\tns.print(\\\"growing \\\", server)\\r\\n\\t\\t\\tawait ns.grow(server);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tawait ns.hack(server);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"hack-copy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"home\",\"moduleSequenceNumber\":108,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Enumerates all the accessible servers.\\r\\n *\\r\\n * @param {NS} ns The Netscript Module.\\r\\n * @param {string} host The server to start scanning from.\\r\\n * @returns {boolean} True if the server will produce money.\\r\\n */\\r\\n \\r\\nexport async function getAllHosts(ns, host=\\\"home\\\") {\\r\\n    // ns.print(scanList)\\r\\n    // ns.tail()\\r\\n    var scannedHosts = []\\r\\n    scanHost(host, scannedHosts)\\r\\n    function scanHost(host, scannedHosts) {\\r\\n        if (!(scannedHosts.includes(host))) {\\r\\n            scannedHosts.push(host)\\r\\n        }\\r\\n        var scanList = ns.scan(host)\\r\\n        if (scanList.length > 1) {\\r\\n            for (let scannedHost in scanList) {\\r\\n                if (!(scannedHosts.includes(scanList[scannedHost]))) {\\r\\n                    // ns.print(scanList[scannedHost])\\r\\n                    scanHost(scanList[scannedHost], scannedHosts)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\t\\r\\n    // ns.print(scannedHosts)\\r\\n    return scannedHosts;\\r\\n}\\r\\n\\r\\nexport async function getRootHosts(ns) {\\r\\n    var rootHosts = []\\r\\n    var hostList = await getAllHosts(ns)\\r\\n    // ns.print(hostList)\\r\\n\\r\\n    for (let index in hostList) {\\r\\n\\t\\tif (ns.hasRootAccess(hostList[index])) {\\r\\n            // ns.print(hostList[index])\\r\\n            rootHosts.push(hostList[index])\\r\\n\\t\\t}\\r\\n    }\\r\\n    // ns.print(rootHosts)\\r\\n    return rootHosts;\\r\\n}\\r\\n\\r\\nexport async function getNonRootHosts(ns) {\\r\\n    \\r\\n    var allHostList = await getAllHosts(ns)\\r\\n    var nukedHostsList = await getRootHosts(ns)\\r\\n    var notNukedHosts = []\\r\\n\\r\\n    for (let index in allHostList) {\\r\\n\\t\\tif (!(nukedHostsList.includes(allHostList[index]))) {\\r\\n            // ns.print(hostList[index])\\r\\n            notNukedHosts.push(allHostList[index])\\r\\n\\t\\t}\\r\\n    }\\r\\n\\r\\n    // ns.print(rootHosts)\\r\\n    return notNukedHosts;\\r\\n}\\r\\n\\r\\n\\r\\nexport async function nukeHosts(ns) {\\r\\n    var maxPorts = 0\\r\\n    var nukedHosts = []\\r\\n    var notNukedHosts = await getNonRootHosts(ns)\\r\\n    // ns.print(notNukedHosts)\\r\\n    // Hacking level\\r\\n    var player = ns.getPlayer()\\r\\n    // ns.print(player.hacking)\\r\\n    // BruteSSH.exe\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\")){\\r\\n\\t\\tmaxPorts++\\r\\n        var brute = true\\r\\n\\t}\\r\\n    // FTPCrack.exe\\r\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")){\\r\\n\\t\\tmaxPorts++\\r\\n        var ftp = true\\r\\n\\t}\\r\\n    // RelaySMTP.exe\\r\\n\\tif (ns.fileExists(\\\"RelaySMTP.exe\\\")){\\r\\n\\t\\tmaxPorts++\\r\\n        var smtp = true\\r\\n\\t}\\r\\n    // HTTPWorm.exe\\r\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")){\\r\\n\\t\\tmaxPorts++\\r\\n        var http = true\\r\\n    }\\r\\n    // SQLInject.exe\\r\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\")){\\r\\n\\t\\tmaxPorts++\\r\\n        var sql = true\\r\\n    }\\r\\n    \\r\\n    ns.printf(\\\"Hacking Level: %s, Max Ports: %s\\\", player.hacking, maxPorts)\\r\\n    for (let index in notNukedHosts) {\\r\\n        var server = notNukedHosts[index]\\r\\n        // ns.printf(\\\"Checking %s for nukeability\\\", server)\\r\\n        var hackingReqLevel = ns.getServerRequiredHackingLevel(server)\\r\\n\\t\\tvar portsReqd = ns.getServerNumPortsRequired(server)\\r\\n\\t\\tif (portsReqd <= maxPorts && hackingReqLevel <= player.hacking) {\\r\\n            if (brute) {ns.print(\\\"bruting \\\", server);await ns.brutessh(server)}\\r\\n            if (ftp) {ns.print(\\\"FTPing \\\", server);await ns.ftpcrack(server)}\\r\\n            if (smtp) {ns.print(\\\"SMTPing \\\", server);await ns.relaysmtp(server)}\\r\\n            if (http) {ns.print(\\\"HTTPing \\\", server);await ns.httpworm(server)}\\r\\n            if (sql) {ns.print(\\\"SQLing \\\", server);await ns.sqlinject(server)}\\r\\n\\r\\n            ns.print(\\\"Nuking \\\", server)\\r\\n            await ns.nuke(server)\\r\\n            nukedHosts.push(server)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ns.print(rootHosts)\\r\\n    return nukedHosts;\\r\\n}\",\"filename\":\"/utilities/scanHosts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utilities/scanHosts.js\",\"url\":\"blob:file:///b7e9b0cf-3cff-4c6a-9e88-fe247bb9edea\",\"moduleSequenceNumber\":148668}],\"dependents\":[],\"ramUsage\":2.95,\"server\":\"home\",\"moduleSequenceNumber\":109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nvar scannedHosts = []\\r\\nvar rootHosts = []\\r\\nconst output = {}\\r\\nconst scriptCost = 0.15\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n\\tfunction scanHost(host) {\\r\\n\\t\\tscannedHosts.push(host)\\r\\n\\t\\tvar scanList = ns.scan(host)\\r\\n\\t\\tif (scanList.length > 1) {\\r\\n\\t\\t\\tfor (let scannedHost in scanList) {\\r\\n\\t\\t\\t\\tif (!(scannedHosts.includes(scanList[scannedHost]))) {\\r\\n\\t\\t\\t\\t\\t// ns.print(scanList[scannedHost])\\r\\n\\t\\t\\t\\t\\tscanHost(scanList[scannedHost])\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfunction getRoot(host) {\\r\\n\\t\\tif (ns.hasRootAccess(host)) {\\r\\n\\t\\t\\tif (host != \\\"home\\\") {\\r\\n\\t\\t\\t\\trootHosts.push(host)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tvar maxRAM = ns.getPurchasedServerMaxRam()\\r\\n\\tvar maxCost = ns.getPurchasedServerCost(ns.getPurchasedServerMaxRam())\\r\\n\\tvar maxCount = ns.getPurchasedServerLimit()\\r\\n\\tvar maxInvestment = maxCost * maxCount\\r\\n\\tns.printf(\\\"max-ram: %s, max-cost: %s, max-servers: %s, max-investment: %s\\\", maxRAM, maxCost, maxCount, maxInvestment)\\r\\n\\r\\n\\tscanHost(\\\"home\\\")\\r\\n\\tfor (let index in scannedHosts) {\\r\\n\\t\\t// ns.print(scannedHosts[index])\\r\\n\\t\\tvar server = scannedHosts[index]\\r\\n\\t\\t// ns.print(server)\\r\\n\\t\\tvar serverInfo = ns.getServer(server)\\r\\n\\t\\tvar requiredGrow = serverInfo.moneyMax / serverInfo.moneyAvailable\\r\\n\\t\\tvar cleanoutThreads = ns.hackAnalyzeThreads(server, serverInfo.moneyAvailable)\\r\\n\\t\\tif (serverInfo.moneyMax > 0) {\\r\\n\\t\\t\\tvar growTimes = ns.growthAnalyze(server, requiredGrow);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tvar growTimes = \\\"N/A\\\"\\r\\n\\t\\t}\\r\\n\\t\\tvar hackingChance = (ns.hackAnalyzeChance(server)*100).toFixed(0)\\r\\n\\t\\tvar growthServers = maxRAM/(growTimes/scriptCost)\\r\\n\\t\\tvar portsReqd = ns.getServerNumPortsRequired(server)\\r\\n\\t\\tvar player = ns.getPlayer()\\r\\n\\t\\tvar hackingReqLevel = ns.getServerRequiredHackingLevel(server)\\r\\n\\t\\tif (hackingChance > 0 && serverInfo.moneyMax > 0 && player.hacking > hackingReqLevel) {\\r\\n\\t\\t\\toutput[server] = {\\r\\n\\t\\t\\t\\t\\\"hackingReqLevel\\\": hackingReqLevel,\\r\\n\\t\\t\\t\\t\\\"portsReqd\\\": portsReqd,\\r\\n\\t\\t\\t\\t// \\\"servers-to-max-money\\\": growthServers,\\r\\n\\t\\t\\t\\t// \\\"cost-to-max-money\\\": maxCost*growthServers,\\r\\n\\t\\t\\t\\t\\\"serverGrowth\\\": serverInfo.serverGrowth,\\r\\n\\t\\t\\t\\t\\\"serverMaxMoney\\\": serverInfo.moneyMax.toExponential(2),\\r\\n\\t\\t\\t\\t// \\\"cleanoutThreads\\\": cleanoutThreads,\\r\\n\\t\\t\\t\\t// \\\"growTimes\\\": Math.floor(growTimes),\\r\\n\\t\\t\\t\\t// \\\"growIndex\\\": (serverInfo.moneyMax/Math.floor(growTimes)).toFixed(0),\\r\\n\\t\\t\\t\\t// \\\"hackingChance\\\": hackingChance,\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tgetRoot(scannedHosts[index])\\r\\n\\t}\\r\\n\\tfor (let index in rootHosts) {\\r\\n\\t\\t// var server = rootHosts[index]\\r\\n\\t\\t// // ns.print(server)\\r\\n\\t\\t// var serverInfo = ns.getServer(server)\\r\\n\\t\\t// var requiredGrow = serverInfo.moneyMax / serverInfo.moneyAvailable\\r\\n\\t\\t// var cleanoutThreads = ns.hackAnalyzeThreads(server, serverInfo.moneyMax)\\r\\n\\t\\t// if (serverInfo.moneyMax > 0) {\\r\\n\\t\\t// \\tvar growTimes = ns.growthAnalyze(server, requiredGrow);\\r\\n\\t\\t// } else {\\r\\n\\t\\t// \\tvar growTimes = \\\"N/A\\\"\\r\\n\\t\\t// }\\r\\n\\t\\t\\r\\n\\t\\t// output[server] = {\\r\\n\\t\\t// \\t\\\"serverGrowth\\\": serverInfo.serverGrowth,\\r\\n\\t\\t// \\t\\\"serverMaxMoney\\\": serverInfo.moneyMax,\\r\\n\\t\\t// \\t\\\"cleanoutThreads\\\": cleanoutThreads,\\r\\n\\t\\t// \\t\\\"growTimes\\\": growTimes\\r\\n\\t\\t// }\\r\\n\\t}\\r\\n\\tns.tail()\\r\\n\\tns.print(JSON.stringify(output, null, 2))\\r\\n\\t// ns.print(scannedHosts)\\r\\n\\t// ns.print(rootHosts)\\r\\n\\r\\n}\",\"filename\":\"server-info.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"server-info.js\",\"url\":\"blob:file:///ddb42e7f-697b-4344-ac6e-e77e69fb23d6\",\"moduleSequenceNumber\":333008}],\"dependents\":[],\"ramUsage\":7.9,\"server\":\"home\",\"moduleSequenceNumber\":110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllHosts,getNonRootHosts,getRootHosts,nukeHosts } from \\\"./utilities/scanHosts\\\";\\r\\nimport { calculateRatio, launchThreads } from \\\"./utilities/hackHost\\\";\\r\\nimport * as fatten from \\\"./fatten.js\\\"\\r\\nimport * as killall from \\\"./killall\\\"\\r\\n\\r\\n/** @param {NS} ns */\\r\\nconst syncList = [\\\"hack.js\\\",\\\"grow.js\\\",\\\"weaken.js\\\"]\\r\\nconst scriptCost = 1.75\\r\\nvar outputThreads= [0,0,0]\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    ns.tail()\\r\\n    // calculateThreads(ns, \\\"n00dles\\\")\\r\\n    if (ns.args[0]) {\\r\\n        const targetServer = ns.args[0]\\r\\n    }\\r\\n    const threadRatio = await calculateRatio(ns, targetServer)\\r\\n\\r\\n    function calculateThreads(host) {\\r\\n        var server = ns.getServer(host)\\r\\n        var totalThreads = Math.floor(server.maxRam/scriptCost)\\r\\n        var hackThreads = Math.floor(totalThreads*threadRatio[0])\\r\\n        var growThreads = Math.floor(totalThreads*threadRatio[1])\\r\\n        var weakThreads = Math.floor(totalThreads*threadRatio[2])\\r\\n        // ns.print(hackThreads, growThreads, weakThreads)\\r\\n        return [\\r\\n            hackThreads,\\r\\n            growThreads,\\r\\n            weakThreads\\r\\n        ]\\r\\n    }\\r\\n\\r\\n    async function copyHackFile(host, syncList) {\\r\\n\\t\\tfor (let file in syncList) {\\r\\n\\t\\t\\tns.rm(syncList[file], host)\\r\\n\\t\\t}\\r\\n\\t\\tawait ns.scp(syncList, \\\"home\\\", host)\\r\\n\\t\\t// await ns.scp(\\\"hack.js\\\", \\\"home\\\", host)\\r\\n\\t}\\r\\n\\r\\n    const rootHosts = await getRootHosts(ns)\\r\\n    for (let index in rootHosts) {\\r\\n        if (rootHosts[index] != \\\"home\\\") {\\r\\n            var server = rootHosts[index]\\r\\n            var threadCounts = calculateThreads(server)\\r\\n            ns.killall(server, true)\\r\\n            await copyHackFile(server, syncList)\\r\\n            await launchThreads(ns, server, \\\"grow.js\\\", threadCounts[1], targetServer)\\r\\n            await launchThreads(ns, server, \\\"hack.js\\\", threadCounts[0], targetServer)\\r\\n            await launchThreads(ns, server, \\\"weaken.js\\\", threadCounts[2], targetServer)\\r\\n            outputThreads[0] = outputThreads[0]+threadCounts[0]\\r\\n            outputThreads[1] = outputThreads[1]+threadCounts[1]\\r\\n            outputThreads[2] = outputThreads[2]+threadCounts[2]\\r\\n        }\\r\\n    }\\r\\n    ns.printf(\\\"hack: %s, grow: %s, weak: %s\\\", outputThreads[0],outputThreads[1],outputThreads[2])\\r\\n    while (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(targetServer) / ns.getServerMaxMoney(targetServer)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(targetServer)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", targetServer, (hackingChance*100).toFixed(2), (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.5 || percentMoney < 0.5){\\r\\n            ns.atExit(await killall.main(ns))\\r\\n        }else if (hackingChance < 0.95) {\\r\\n\\t\\t\\tns.print(\\\"weakening \\\", targetServer)\\r\\n\\t\\t\\tawait ns.weaken(targetServer)\\r\\n\\t\\t} else if (percentMoney < 0.75) {\\r\\n\\t\\t\\tns.print(\\\"growing \\\", targetServer)\\r\\n\\t\\t\\tawait ns.grow(targetServer);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(targetServer);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"test-host.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utilities/hackHost.js\",\"url\":\"blob:file:///8311acb9-81e6-481b-b228-992cdfb3952c\",\"moduleSequenceNumber\":200208},{\"filename\":\"/utilities/scanHosts.js\",\"url\":\"blob:file:///b6a7c38d-046d-47b7-9fde-fa2e01c3e559\",\"moduleSequenceNumber\":200737},{\"filename\":\"test-host.js\",\"url\":\"blob:file:///c4e0cee3-9ad7-4bb6-a08e-c4419c0477e9\",\"moduleSequenceNumber\":208622}],\"dependents\":[],\"ramUsage\":14.25,\"server\":\"home\",\"moduleSequenceNumber\":111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Determines the optimal thread count to dedicate to hacking, growing and weakening.\\r\\n *\\r\\n * @param {NS} ns The Netscript Module.\\r\\n * @param {string} host The server to start scanning from.\\r\\n * @returns {boolean} True if the server will produce money.\\r\\n */\\r\\n\\r\\nexport async function calculateRatio(ns, host=\\\"foodnstuff\\\") {\\r\\n    var threads = 10\\r\\n    var cores = 1\\r\\n    var hostname = host\\r\\n\\r\\n    var server = await ns.getServer(host)\\r\\n    // ns.print(server)\\r\\n    var hackTime = ns.getHackTime(host)\\r\\n    var hackChange = ns.hackAnalyze(host)\\r\\n    var hackSecurity = ns.hackAnalyzeSecurity(threads, hostname)\\r\\n    const hackWeight = 0.5\\r\\n    var growTime = ns.getGrowTime(host)\\r\\n    var growthChange = ns.growthAnalyze(host, 1+(hackChange*threads), cores)\\r\\n    var growthSecurity = ns.growthAnalyzeSecurity(threads, hostname, cores)\\r\\n    const growWeight = 1.25\\r\\n    var weakTime = ns.getWeakenTime(host)\\r\\n    var weakenChange = ns.weakenAnalyze(threads, cores)\\r\\n    var weakThreads = ((growthSecurity*growthChange)+hackSecurity)/weakenChange\\r\\n    const weakWeight = 1\\r\\n//     const output = `---\\r\\n// Hack threads:                       ${threads}\\r\\n// Growth threads:                     ${growthChange}\\r\\n// Weakens threads:                    ${weakThreads}\\r\\n// `\\r\\n//     ns.print(output)\\r\\n    var totalTime = threads*hackTime + growthChange*growTime + weakThreads*weakTime\\r\\n    var threadRatio = [\\r\\n        (threads*hackTime/totalTime)*hackWeight,\\r\\n        (growthChange*growTime/totalTime)*growWeight,\\r\\n        (weakThreads*weakTime/totalTime)*weakWeight\\r\\n    ]\\r\\n    ns.print(threadRatio)\\r\\n    return threadRatio\\r\\n\\r\\n}\\r\\n\\r\\nexport async function launchThreads(ns, host=\\\"foodnstuff\\\", scriptName=\\\"weaken.js\\\", threadCount=\\\"1\\\", targetHost=\\\"n00dles\\\"){\\r\\n    if (threadCount > 0){\\r\\n        // ns.print(scriptName, host, threadCount, targetHost)\\r\\n        ns.exec(scriptName, host, threadCount, targetHost)\\r\\n    }\\r\\n}\",\"filename\":\"/utilities/hackHost.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.05,\"server\":\"home\",\"moduleSequenceNumber\":112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllHosts,getNonRootHosts,getRootHosts,nukeHosts } from \\\"./utilities/scanHosts\\\";\\r\\nexport async function main(ns) {\\r\\n    var allHosts = await getRootHosts(ns)\\r\\n    ns.print(allHosts)\\r\\n    for (let index in allHosts) {\\r\\n        // if (!(allHosts[index].includes(\\\"node\\\"))){\\r\\n\\t\\t\\tif (allHosts[index] != \\\"home\\\"){\\r\\n                ns.print(\\\"Killing \\\",allHosts[index])\\r\\n                await ns.killall(allHosts[index])\\r\\n            }\\r\\n        // }\\r\\n    }\\r\\n}\",\"filename\":\"killall.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utilities/scanHosts.js\",\"url\":\"blob:file:///41d92f4f-5889-4123-a7c4-8c0c303ee842\",\"moduleSequenceNumber\":713977},{\"filename\":\"killall.js\",\"url\":\"blob:file:///bf47e607-c894-4a25-8608-e5de1f87ec11\",\"moduleSequenceNumber\":714274}],\"dependents\":[],\"ramUsage\":2.35,\"server\":\"home\",\"moduleSequenceNumber\":113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n// import { getRootHosts } from \\\"./utilities/scanHosts\\\"\\r\\n// import { massGrow } from \\\"./utilities/launch-grow\\\"\\r\\n// import { massWeaken } from \\\"./utilities/launch-weaken\\\"\\r\\n// import * as killall from \\\"./killall\\\"\\r\\nexport async function main(ns) {\\r\\n    ns.tail()\\r\\n    // Get list of root hosts\\r\\n    // massGrow with root hosts\\r\\n    // massWeaken with specific hosts\\r\\n    const server = ns.args[0]\\r\\n    const targetServer = ns.args[1]\\r\\n    const scriptCost = 1.75\\r\\n    var waitBuffer = 1000\\r\\n    var waitTime = 0\\r\\n    ns.print(\\\"Fattening \\\", targetServer, \\\" on \\\", server)\\r\\n\\r\\n    async function launchThings(scriptTarget, waitTime) {\\r\\n        if (maxThreads > 0){\\r\\n            ns.killall(server, true)\\r\\n            ns.printf(\\\"%s: %s\\\", server, maxThreads)\\r\\n            ns.printf(\\\"Running %s threads of %s\\\", maxThreads, scriptTarget)\\r\\n            if (maxThreads > 20000) {\\r\\n                var i = 1\\r\\n                var threadBatches = maxThreads / 10000\\r\\n                while (i < threadBatches) {\\r\\n                    ns.exec(scriptTarget, server, Math.floor(maxThreads/threadBatches), targetServer, Math.random())\\r\\n                    i++\\r\\n                }\\r\\n            } else {\\r\\n                ns.exec(scriptTarget, server, maxThreads, targetServer, 0)\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(waitTime)\\r\\n    }\\r\\n\\r\\n    // const rootHosts = await getRootHosts(ns)\\r\\n    // await massGrow(ns, server, rootHosts)\\r\\n    // await massWeaken(ns, server)\\r\\n    var fattening = true\\r\\n    while (fattening == true) {\\r\\n        var maxThreads = Math.floor(ns.getServerMaxRam(server) / scriptCost)\\r\\n        var weakTime= ns.getWeakenTime(targetServer)\\r\\n        var growTime= ns.getGrowTime(targetServer)\\r\\n        var scriptTarget = \\\"\\\"\\r\\n\\r\\n\\r\\n        // If security is too low, weaken\\r\\n        if (ns.getServerMinSecurityLevel(targetServer) < ns.getServerSecurityLevel(targetServer)) {\\r\\n            scriptTarget = \\\"single-weaken.js\\\"\\r\\n            waitTime = waitBuffer + weakTime\\r\\n            ns.printf(\\\"Need to weaken by %s more\\\", ns.getServerSecurityLevel(targetServer) - ns.getServerMinSecurityLevel(targetServer))\\r\\n            await launchThings(scriptTarget, waitTime)\\r\\n        } else if (ns.getServerMoneyAvailable(targetServer) < ns.getServerMaxMoney(targetServer)) {\\r\\n            scriptTarget = \\\"single-grow.js\\\"\\r\\n            waitTime = waitBuffer + growTime\\r\\n            await launchThings(scriptTarget, waitTime)\\r\\n        } else {\\r\\n            fattening = false\\r\\n            return \\\"This boi fat\\\"\\r\\n            // await ns.sleep(waitTime + 1000)\\r\\n            // continue // Move to next server\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"filename\":\"fatten.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"fatten.js\",\"url\":\"blob:file:///6b21816a-7117-466d-bfea-c6e1605c0990\",\"moduleSequenceNumber\":221994}],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"home\",\"moduleSequenceNumber\":114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\nimport { getRootHosts } from \\\"./utilities/scanHosts\\\"\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns, targetServer=\\\"n00dles\\\") {\\r\\n\\tns.tail()\\r\\n\\tconst scriptCost = 1.75\\r\\n\\tconst scriptHosts = [\\\"home\\\"]\\r\\n\\tconst execTime = ns.getWeakenTime(targetServer)\\r\\n\\t// const scriptHosts = await getRootHosts(ns)\\r\\n\\tfor (let index in scriptHosts) {\\r\\n        if (!scriptHosts[index].includes(\\\"node\\\")){\\r\\n            ns.killall(scriptHosts[index], true)\\r\\n            var maxThreads = Math.floor(ns.getServerMaxRam(scriptHosts[index]) / scriptCost)\\r\\n            ns.printf(\\\"%s: %s\\\", scriptHosts[index], maxThreads)\\r\\n            if (maxThreads > 0){\\r\\n                if (maxThreads > 1000) {\\r\\n                    var i = 1\\r\\n                    var threadBatches = maxThreads / 200\\r\\n                    while (i < threadBatches) {\\r\\n                        const initSleep = Math.floor(Math.random() * execTime)\\r\\n                        ns.exec(\\\"oversight.js\\\", scriptHosts[index], Math.floor(maxThreads/threadBatches), targetServer, initSleep/2)\\r\\n                        i++\\r\\n                    }\\r\\n                } else {\\r\\n                    ns.exec(\\\"oversight.js\\\", scriptHosts[index], maxThreads, targetServer, execTime)\\r\\n                }\\r\\n            }\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"filename\":\"/utilities/launch-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utilities/scanHosts.js\",\"url\":\"blob:file:///174163df-54ab-486a-b2e4-7af96dbb2c84\",\"moduleSequenceNumber\":102273},{\"filename\":\"/utilities/launch-hack.js\",\"url\":\"blob:file:///6ba054a6-8c68-4831-9a58-ecdc8c7679d9\",\"moduleSequenceNumber\":111828}],\"dependents\":[],\"ramUsage\":3.5,\"server\":\"home\",\"moduleSequenceNumber\":115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRootHosts } from \\\"./utilities/scanHosts\\\"\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns, targetServer=\\\"joesguns\\\") {\\r\\n\\tns.tail()\\r\\n\\tconst scriptCost = 1.75\\r\\n\\tconst serverList = [\\\"foodnstuff\\\",\\\"CSEC\\\"]\\r\\n\\tconst execTime = ns.getWeakenTime(targetServer)\\r\\n\\t// const serverList = await getRootHosts(ns)\\r\\n\\tfor (let index in serverList) {\\r\\n        // if (!(serverList[index].includes(\\\"node\\\"))){\\r\\n\\t\\t\\tif (serverList[index] != \\\"home\\\"){\\r\\n\\t\\t\\t\\tns.killall(serverList[index], true)\\r\\n\\t\\t\\t\\tvar maxThreads = Math.floor(ns.getServerMaxRam(serverList[index]) / scriptCost)\\r\\n\\t\\t\\t\\tns.printf(\\\"%s: %s\\\", serverList[index], maxThreads)\\r\\n\\t\\t\\t\\tif (maxThreads > 0){\\r\\n\\t\\t\\t\\t\\tif (maxThreads > 2000) {\\r\\n\\t\\t\\t\\t\\t\\tvar i = 1\\r\\n\\t\\t\\t\\t\\t\\tvar threadBatches = maxThreads / 1000\\r\\n\\t\\t\\t\\t\\t\\twhile (i < threadBatches) {\\r\\n\\t\\t\\t\\t\\t\\t\\tconst initSleep = Math.floor(Math.random() * execTime/2)\\r\\n\\t\\t\\t\\t\\t\\t\\tns.exec(\\\"weaken.js\\\", serverList[index], Math.floor(maxThreads/threadBatches), targetServer, initSleep/2)\\r\\n\\t\\t\\t\\t\\t\\t\\ti++\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tns.exec(\\\"weaken.js\\\", serverList[index], maxThreads, targetServer, 0)\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t// }\\r\\n\\t}\\r\\n}\\r\\n\",\"filename\":\"/utilities/launch-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utilities/scanHosts.js\",\"url\":\"blob:file:///f7decdff-5f6c-4de9-9c6e-c9bb1477a5c7\",\"moduleSequenceNumber\":109},{\"filename\":\"/utilities/launch-weaken.js\",\"url\":\"blob:file:///ba58da72-09b8-4622-92d3-e7f2e4c7d64c\",\"moduleSequenceNumber\":3367}],\"dependents\":[],\"ramUsage\":3.5,\"server\":\"home\",\"moduleSequenceNumber\":3367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n// var serverList = [\\\"node-23\\\"]\\r\\nimport { getRootHosts } from \\\"./utilities/scanHosts\\\"\\r\\nexport async function main(ns, targetServer=\\\"joesguns\\\") {\\r\\n\\tns.tail()\\r\\n\\tvar serverList = await getRootHosts(ns)\\r\\n\\t// var serverList = [\\\"node\\\"]\\r\\n\\tconst execTime = ns.getGrowTime(targetServer)\\r\\n\\tconst scriptCost = 1.75\\r\\n\\tfor (let index in serverList) {\\r\\n        if (!(serverList[index].includes(\\\"node\\\"))){\\r\\n\\t\\t\\tif (serverList[index] != \\\"home\\\"){\\r\\n\\t\\t\\t\\tns.killall(serverList[index], true)\\r\\n\\t\\t\\t\\tvar maxThreads = Math.floor(ns.getServerMaxRam(serverList[index]) / scriptCost)\\r\\n\\t\\t\\t\\tns.printf(\\\"%s: %s\\\", serverList[index], maxThreads)\\r\\n\\t\\t\\t\\tif (maxThreads > 0){\\r\\n\\t\\t\\t\\t\\tif (maxThreads > 2000) {\\r\\n\\t\\t\\t\\t\\t\\tvar i = 1\\r\\n\\t\\t\\t\\t\\t\\tvar threadBatches = maxThreads / 1000\\r\\n\\t\\t\\t\\t\\t\\twhile (i < threadBatches) {\\r\\n\\t\\t\\t\\t\\t\\t\\tconst initSleep = Math.floor(Math.random() * execTime)\\r\\n\\t\\t\\t\\t\\t\\t\\tns.exec(\\\"grow.js\\\", serverList[index], Math.floor(maxThreads/threadBatches), targetServer, initSleep/2)\\r\\n\\t\\t\\t\\t\\t\\t\\ti++\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tns.exec(\\\"grow.js\\\", serverList[index], maxThreads, targetServer, 200)\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/utilities/launch-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utilities/scanHosts.js\",\"url\":\"blob:file:///3e269179-5ac0-413f-afbe-75a4f03b3254\",\"moduleSequenceNumber\":109},{\"filename\":\"/utilities/launch-grow.js\",\"url\":\"blob:file:///eeedc0d6-60f9-465f-bf19-bdfb508835fd\",\"moduleSequenceNumber\":1022}],\"dependents\":[],\"ramUsage\":3.75,\"server\":\"home\",\"moduleSequenceNumber\":1022,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getRootHosts } from \\\"./utilities/scanHosts\\\";\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // ns.tail()\\r\\n    const syncList = [\\r\\n        \\\"hack.js\\\",\\r\\n        \\\"grow.js\\\",\\r\\n        \\\"weaken.js\\\",\\r\\n        \\\"oversight.js\\\",\\r\\n        \\\"aio.js\\\",\\r\\n        \\\"single-hack.js\\\",\\r\\n        \\\"single-grow.js\\\",\\r\\n        \\\"single-weaken.js\\\",\\r\\n        \\\"share.js\\\",\\r\\n        \\\"batch-job.js\\\"\\r\\n    ]\\r\\n    const hostList = await getRootHosts(ns)\\r\\n    for (let index in hostList) {\\r\\n        if (hostList[index] != \\\"home\\\") {\\r\\n            await ns.killall(hostList[index])\\r\\n            for (let fileIndex in syncList) {\\r\\n                try {\\r\\n                    await ns.rm(syncList[fileIndex], hostList[index])\\r\\n                } catch (error) {\\r\\n                    ns.print(error);\\r\\n                }\\r\\n            }\\r\\n            await ns.scp(syncList, \\\"home\\\", hostList[index])\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"update.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/utilities/scanHosts.js\",\"url\":\"blob:file:///543d25b1-5292-4d83-9784-d46eeb437e23\",\"moduleSequenceNumber\":109},{\"filename\":\"update.js\",\"url\":\"blob:file:///6dcbd023-45e1-42e0-80aa-0d3fa0c21d7c\",\"moduleSequenceNumber\":318}],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"home\",\"moduleSequenceNumber\":318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.grow(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.hack(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///ec6f737d-4664-481e-8390-9b7b6adabc38\",\"moduleSequenceNumber\":714167}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\t// ns.print(ns.args.length);\\r\\n\\twhile(true) {\\r\\n\\t\\tawait ns.weaken(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0b700b8f-8e04-4540-9726-90d59d9efce0\",\"moduleSequenceNumber\":714168}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":121,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, (hackingChance*100).toFixed(2), (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.15) {\\r\\n\\t\\t\\t// ns.print(\\\"weakening \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.60) {\\r\\n\\t\\t\\t// ns.print(\\\"growing \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"oversight.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"oversight.js\",\"url\":\"blob:file:///eac9df59-8340-430d-b45e-a78a71786f68\",\"moduleSequenceNumber\":206}],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"home\",\"moduleSequenceNumber\":206,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    // ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, hackingChance*100, (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.9) {\\r\\n\\t\\t\\tns.print(\\\"weakening \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.75) {\\r\\n\\t\\t\\tns.print(\\\"growing \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"aio.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"aio.js\",\"url\":\"blob:file:///b5af59a8-cc7e-42e5-a6d8-2ba165ef72e3\",\"moduleSequenceNumber\":205}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"home\",\"moduleSequenceNumber\":205,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nimport { getRootHosts } from \\\"./utilities/scanHosts\\\"\\r\\nexport async function main(ns, targetServer=\\\"home\\\") {\\r\\n\\tns.tail()\\r\\n\\tconst scriptCost = 4.00\\r\\n\\t// ns.printf(\\\"%s: %s\\\", targetServer, maxThreads)\\r\\n\\tvar serverList = await getRootHosts(ns)\\r\\n\\tfor (let index in serverList) {\\r\\n\\t\\tvar maxRam = ns.getServerMaxRam(serverList[index])\\r\\n\\t\\tvar usedRam = ns.getServerUsedRam(serverList[index])\\r\\n\\t\\t// var [maxRam, ramUsed] = ns.getServerRam(serverList[index]);\\r\\n        // if (!(serverList[index].includes(\\\"node\\\"))){\\r\\n\\t\\t\\tif (serverList[index] != \\\"home\\\"){\\r\\n\\t\\t\\t\\tvar maxThreads = Math.floor((maxRam - usedRam) / scriptCost)\\r\\n\\t\\t\\t\\tns.printf(\\\"%s: %s\\\", serverList[index], maxThreads)\\r\\n\\t\\t\\t\\tif (maxThreads > 0){\\r\\n\\t\\t\\t\\t\\tns.exec(\\\"share.js\\\", serverList[index], Math.floor(maxThreads))\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t// }\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"filename\":\"/utilities/launch-share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utilities/scanHosts.js\",\"url\":\"blob:file:///3da4c559-b870-4576-9eba-bf55d5724338\",\"moduleSequenceNumber\":3963},{\"filename\":\"/utilities/launch-share.js\",\"url\":\"blob:file:///a6c9010d-79b7-4ac1-87f7-1e91e5652fa4\",\"moduleSequenceNumber\":20856}],\"dependents\":[],\"ramUsage\":3.25,\"server\":\"home\",\"moduleSequenceNumber\":3552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.share()\\r\\n\\t}\\r\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///b381d4f5-2df8-4015-aa85-a13f32d8fc42\",\"moduleSequenceNumber\":133796}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.getServerMinSecurityLevel(server) - ns.getServerSecurityLevel(server)\\r\\n\\t\\tns.printf(\\\"security: %s, money: %s\\\", (hackingChance*100).toFixed(2), (percentMoney*100).toFixed(2))\\r\\n\\t\\tawait ns.sleep(2000)\\r\\n\\t\\t// if (hackingChance < 0.15) {\\r\\n\\t\\t// \\t// ns.print(\\\"weakening \\\", server)\\r\\n        //     await ns.sleep(2000)\\r\\n\\t\\t// \\t// await ns.weaken(server)\\r\\n\\t\\t// } else if (percentMoney < 0.50) {\\r\\n\\t\\t// \\t// ns.print(\\\"growing \\\", server)\\r\\n        //     await ns.sleep(2000)\\r\\n\\t\\t// \\t// await ns.grow(server);\\r\\n\\t\\t// } else {\\r\\n        //     ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t// \\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t// \\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t// }\\r\\n\\t}\\r\\n}\",\"filename\":\"no-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"no-hack.js\",\"url\":\"blob:file:///fe69e428-837d-4b50-9ca5-a53670da99fa\",\"moduleSequenceNumber\":714169}],\"dependents\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.grow(server)\\r\\n}\",\"filename\":\"single-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"single-grow.js\",\"url\":\"blob:file:///cdde593a-3091-4740-830c-71932fba7d2a\",\"moduleSequenceNumber\":714006}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.hack(server)\\r\\n}\",\"filename\":\"single-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"single-hack.js\",\"url\":\"blob:file:///d78ade61-d3f1-44cd-b1bc-d4eec6a969f7\",\"moduleSequenceNumber\":714004}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.weaken(server)\\r\\n}\",\"filename\":\"single-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///0dd7a89d-30ec-416e-bfb5-9afd7ab1d184\",\"moduleSequenceNumber\":714007}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//hack\\r\\n//weaken\\r\\n//grow\\r\\n//weaken\\r\\n//establish target\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // ns.tail()\\r\\n    ns.disableLog(\\\"ALL\\\")\\r\\n    ns.print(\\\"---\\\")\\r\\n    var server = ns.args[0]\\r\\n    var targetServer = ns.args[1]\\r\\n    const scriptCost = 1.75\\r\\n    // try {\\r\\n    //     ns.exec(\\\"no-hack.js\\\", \\\"home\\\", 1, targetServer)\\r\\n    // } catch {\\r\\n    //     ns.print(\\\"Maybe it's already running\\\")\\r\\n    // }\\r\\n    // ns.print(targetServer)\\r\\n\\r\\n    //establish timing\\r\\n    const scriptOffset = 20\\r\\n    const batchBuffer = 500\\r\\n    var hackTime= 0\\r\\n    var weakTime= 0\\r\\n    var growTime= 0\\r\\n    var totalTime = 0\\r\\n    var potentialBatches = 0\\r\\n    var batchOffset = 0\\r\\n    var hackOffset = 0\\r\\n    var growOffset = 0\\r\\n    var weakOffset = 0\\r\\n\\r\\n    function establishTiming(){\\r\\n        hackTime= ns.getHackTime(targetServer)\\r\\n        weakTime= ns.getWeakenTime(targetServer)\\r\\n        growTime= ns.getGrowTime(targetServer)\\r\\n        totalTime = weakTime + scriptOffset * 3\\r\\n        potentialBatches = Math.floor(totalTime / ((scriptOffset * 4) + batchBuffer))\\r\\n        batchOffset = totalTime / potentialBatches\\r\\n        // ns.print(\\\"potentialBatches: \\\", potentialBatches)\\r\\n        // ns.print(\\\"batchOffset: \\\", batchOffset)\\r\\n        if (hackTime < growTime && growTime < weakTime) {\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            growOffset = (weakTime - growTime) + scriptOffset\\r\\n            weakOffset = scriptOffset * 2\\r\\n        } else {\\r\\n            ns.print(\\\"Timing doesn't work\\\")\\r\\n        }\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            return [potentialBatches, batchOffset, growOffset, weakOffset]\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n    var serverMoney = 0\\r\\n    var desiredHackAmount = 0\\r\\n    var desiredHackThreads = 0\\r\\n    var hackSecurityIncrease = 0\\r\\n    var weakenChange = 0\\r\\n    var weakenHackThreads = 0\\r\\n    var desiredGrowMultiplier = 0\\r\\n    var desiredGrowThreads = 0\\r\\n    var growSecurityIncrease = 0\\r\\n    var weakenGrowThreads = 0\\r\\n\\r\\n    function establishThreads(hackTarget) {\\r\\n        serverMoney = ns.getServerMoneyAvailable(targetServer)\\r\\n        desiredHackAmount = (serverMoney * hackTarget)\\r\\n        desiredHackThreads = Math.ceil(ns.hackAnalyzeThreads(targetServer, desiredHackAmount))\\r\\n        hackSecurityIncrease = (ns.hackAnalyzeSecurity(desiredHackThreads, targetServer) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenChange = ns.weakenAnalyze(1, 1)\\r\\n        weakenHackThreads = Math.ceil(hackSecurityIncrease / weakenChange)\\r\\n        desiredGrowMultiplier = (serverMoney / (serverMoney - desiredHackAmount))\\r\\n        if (!desiredGrowMultiplier){\\r\\n            desiredGrowMultiplier = 900\\r\\n        } else if (desiredGrowMultiplier < 1) {\\r\\n            desiredGrowMultiplier = 1\\r\\n        }\\r\\n        desiredGrowThreads = Math.ceil(ns.growthAnalyze(targetServer, desiredGrowMultiplier*1.15))\\r\\n        growSecurityIncrease = ((ns.growthAnalyzeSecurity(1, targetServer, 1)*desiredGrowThreads) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenGrowThreads = Math.ceil(growSecurityIncrease*1.15 / weakenChange)\\r\\n        // ns.print(\\\"desiredGrowMultiplier \\\", desiredGrowMultiplier)\\r\\n        // ns.print(\\\"desiredGrowThreads \\\", desiredGrowThreads)\\r\\n        return [desiredHackThreads+1, weakenHackThreads+1, desiredGrowThreads+1, weakenGrowThreads+1];\\r\\n    }\\r\\n\\r\\n    // [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n    [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n    // ns.exec(\\\"single-hack.js\\\", server, 1, targetServer, 0)\\r\\n    // await ns.sleep(hackTime+100)\\r\\n    \\r\\n    var batchCost = 16\\r\\n\\r\\n    while (true) {\\r\\n        // var spaceAvailable = true\\r\\n        var hackTarget = 0.90\\r\\n        // ns.printf(\\\"desiredGrowThreads %s\\\", desiredGrowThreads)\\r\\n        let [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n        for (let i = 1; i < potentialBatches; i++) {\\r\\n            while (batchCost >= 16 && hackTarget > 0.05) {\\r\\n                let [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n                batchCost = (desiredHackThreads + weakenHackThreads + desiredGrowThreads + weakenGrowThreads) * scriptCost;\\r\\n                if ((ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) > batchCost){\\r\\n                    if (serverMoney/ns.getServerMaxMoney(targetServer) <= 0.10) {\\r\\n                        desiredHackThreads  = 1\\r\\n                    }\\r\\n                    ns.print(\\\"+++\\\")\\r\\n                    ns.printf(\\\"Hacking for %s\\\", hackTarget*100)\\r\\n                    // ns.print(\\\"batch \\\", i)\\r\\n                    ns.printf(\\\"hack %s with %s threads from %s\\\", targetServer, desiredHackThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenHackThreads, server)\\r\\n                    ns.printf(\\\"grow %s with %s threads from %s\\\", targetServer, desiredGrowThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenGrowThreads, server)\\r\\n                    ns.exec(\\\"single-hack.js\\\", server, desiredHackThreads, targetServer, hackOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenHackThreads, targetServer, 0, Math.random())\\r\\n                    ns.exec(\\\"single-grow.js\\\", server, desiredGrowThreads, targetServer, growOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenGrowThreads, targetServer, weakOffset, Math.random())\\r\\n                    // spaceAvailable = true\\r\\n                    await ns.sleep(batchOffset)\\r\\n                } else {\\r\\n                    // ns.print(\\\"Not enough ram on \\\", server)\\r\\n                    // ns.print(\\\"batchCost \\\", batchCost)\\r\\n                    // ns.printf(\\\"desiredHackThreads: %s, %s\\\",desiredHackThreads,desiredHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenHackThreads: %s, %s\\\",weakenHackThreads,weakenHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"desiredGrowThreads: %s, %s\\\",desiredGrowThreads,desiredGrowThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenGrowThreads: %s, %s\\\",weakenGrowThreads,weakenGrowThreads*scriptCost)\\r\\n                    // spaceAvailable = false\\r\\n                    hackTarget = hackTarget / 2\\r\\n                    // ns.print(\\\"hackTarget: \\\",hackTarget)\\r\\n                    await ns.sleep(60)\\r\\n                    break\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // ns.printf(\\\"Sleeping for %sms\\\", batchOffset)\\r\\n        await ns.sleep(batchOffset)\\r\\n    }\\r\\n    \\r\\n}\",\"filename\":\"batch-job.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"batch-job.js\",\"url\":\"blob:file:///4ad8530c-8142-4bcb-94cc-236df6b67ab9\",\"moduleSequenceNumber\":2407}],\"dependents\":[],\"ramUsage\":8.45,\"server\":\"home\",\"moduleSequenceNumber\":2407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {main as fatten} from \\\"./utilities/script-fatten\\\"\\r\\nimport {main as batchJob} from \\\"./utilities/script-batch\\\"\\r\\nimport {main as autoNuke} from \\\"auto-nuke.js\\\"\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.tail()\\r\\n    //  run fatten\\r\\n    //  run aio against a list of servers\\r\\n    //  run batchjob against fattened servers\\r\\n    //  buy software and hack hosts at certain milestones\\r\\n    await fatten(ns, \\\"home\\\", \\\"n00dles\\\")\\r\\n    const earlyServers = [\\r\\n        \\\"n00dles\\\",\\r\\n        \\\"foodnstuff\\\",\\r\\n        // \\\"sigma-cosmetics\\\",\\r\\n        // \\\"joesguns\\\",\\r\\n        // \\\"hong-fang-tea\\\",\\r\\n        // \\\"harakiri-sushi\\\",\\r\\n        // \\\"iron-gym\\\"\\r\\n    ]\\r\\n    await autoNuke(ns)\\r\\n    var earlyServersHacked = 0\\r\\n    // while (earlyServersHacked < earlyServers.length){\\r\\n    for (let i in earlyServers) {\\r\\n        try {\\r\\n            ns.exec(\\\"aio.js\\\", \\\"home\\\", 100, earlyServers[i])\\r\\n            earlyServersHacked++\\r\\n        } catch (err) {\\r\\n            ns.printf(\\\"Couldn't hack %s: %s\\\", earlyServers[i], err)\\r\\n        }\\r\\n    }\\r\\n    // }\\r\\n    const midServers = [\\r\\n        \\\"nectar-net\\\",\\r\\n        \\\"max-hardware\\\",\\r\\n        \\\"zer0\\\",\\r\\n        \\\"neo-net\\\",\\r\\n        \\\"silver-helix\\\",\\r\\n        \\\"phantasy\\\",\\r\\n        \\\"omega-net\\\"\\r\\n    ]\\r\\n    // if (earlyServersHacked >= earlyServers.length){\\r\\n    for (let i in midServers) {\\r\\n        var fatServer = \\\"\\\"\\r\\n        while (fatServer != \\\"This boi fat\\\"){\\r\\n            var fatServer = await fatten(ns, \\\"node\\\", midServers[i])\\r\\n        }\\r\\n        ns.print(\\\"We got us a fat boi: \\\", midServers[i])\\r\\n\\r\\n        try {\\r\\n\\r\\n            ns.print(\\\"Updating \\\", midServers[i])\\r\\n            ns.exec(\\\"update.js\\\", \\\"home\\\", 1)\\r\\n            ns.print(\\\"running batch on \\\", hostServer)\\r\\n            ns.exec(\\\"batch-job.js\\\", \\\"home\\\", 1, \\\"node\\\", midServers[i])\\r\\n        } catch(err) {\\r\\n            ns.exec(\\\"batch-job.js\\\", \\\"home\\\", 1, \\\"home\\\", midServers[i])\\r\\n            ns.print(\\\"Can't batch on %s. Maybe you need to purchase a maxed server\\\", midServers[i])\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    // }\\r\\n\\r\\n\\r\\n}\",\"filename\":\"early-game.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/utilities/scanHosts.js\",\"url\":\"blob:file:///9e37a336-7744-4923-9858-15bd1cb563da\",\"moduleSequenceNumber\":221968},{\"filename\":\"auto-nuke.js\",\"url\":\"blob:file:///ca7e6f30-87b7-4922-a215-ee7b4b00eedb\",\"moduleSequenceNumber\":222028},{\"filename\":\"/utilities/script-batch.js\",\"url\":\"blob:file:///43473917-9518-43a4-8fc2-cc7b3370a2f0\",\"moduleSequenceNumber\":221992},{\"filename\":\"/utilities/script-fatten.js\",\"url\":\"blob:file:///bb3733f2-a966-4f7e-afcd-e2a032c89f6b\",\"moduleSequenceNumber\":221991},{\"filename\":\"early-game.js\",\"url\":\"blob:file:///47113241-90b5-4c06-a02b-462c677f23b6\",\"moduleSequenceNumber\":222071}],\"dependents\":[],\"ramUsage\":5.3,\"server\":\"home\",\"moduleSequenceNumber\":131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n// import { getRootHosts } from \\\"./utilities/scanHosts\\\"\\r\\n// import { massGrow } from \\\"./utilities/launch-grow\\\"\\r\\n// import { massWeaken } from \\\"./utilities/launch-weaken\\\"\\r\\n// import * as killall from \\\"./killall\\\"\\r\\nexport async function main(ns, server = \\\"home\\\", targetServer = \\\"n00dles\\\") {\\r\\n    ns.tail()\\r\\n    // Get list of root hosts\\r\\n    // massGrow with root hosts\\r\\n    // massWeaken with specific hosts\\r\\n    const scriptCost = 1.75\\r\\n    var waitTime = 1000\\r\\n    ns.print(\\\"Fattening \\\", targetServer, \\\" on \\\", server)\\r\\n\\r\\n    async function launchThings() {\\r\\n        if (maxThreads > 0){\\r\\n            ns.killall(server, true)\\r\\n            ns.printf(\\\"%s: %s\\\", server, maxThreads)\\r\\n            ns.printf(\\\"Running %s threads of %s\\\", maxThreads, scriptTarget)\\r\\n            if (maxThreads > 20000) {\\r\\n                var i = 1\\r\\n                var threadBatches = maxThreads / 10000\\r\\n                while (i < threadBatches) {\\r\\n                    ns.exec(scriptTarget, server, Math.floor(maxThreads/threadBatches), targetServer, Math.random())\\r\\n                    i++\\r\\n                }\\r\\n            } else {\\r\\n                ns.exec(scriptTarget, server, maxThreads, targetServer, 0)\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(waitTime)\\r\\n    }\\r\\n\\r\\n    // const rootHosts = await getRootHosts(ns)\\r\\n    // await massGrow(ns, server, rootHosts)\\r\\n    // await massWeaken(ns, server)\\r\\n    var fattening = true\\r\\n    while (fattening == true) {\\r\\n        var maxThreads = Math.floor(ns.getServerMaxRam(server) / scriptCost)\\r\\n        var weakTime= ns.getWeakenTime(targetServer)\\r\\n        var growTime= ns.getGrowTime(targetServer)\\r\\n        var scriptTarget = \\\"\\\"\\r\\n\\r\\n\\r\\n        // If security is too low, weaken\\r\\n        if (ns.getServerMinSecurityLevel(targetServer) < ns.getServerSecurityLevel(targetServer)) {\\r\\n            scriptTarget = \\\"single-weaken.js\\\"\\r\\n            waitTime = waitTime + weakTime\\r\\n            await launchThings()\\r\\n        } else if (ns.getServerMoneyAvailable(targetServer) < ns.getServerMaxMoney(targetServer)) {\\r\\n            scriptTarget = \\\"single-grow.js\\\"\\r\\n            waitTime = waitTime + growTime\\r\\n            await launchThings()\\r\\n        } else {\\r\\n            fattening = false\\r\\n            return \\\"This boi fat\\\"\\r\\n            // await ns.sleep(waitTime + 1000)\\r\\n            // continue // Move to next server\\r\\n        }\\r\\n        \\r\\n        fattening = false\\r\\n    }\\r\\n\\r\\n}\",\"filename\":\"/utilities/script-fatten.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.95,\"server\":\"home\",\"moduleSequenceNumber\":132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//hack\\r\\n//weaken\\r\\n//grow\\r\\n//weaken\\r\\n//establish target\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns, server = \\\"home\\\", targetServer = \\\"n00dles\\\") {\\r\\n    ns.tail()\\r\\n    ns.print(\\\"---\\\")\\r\\n    const scriptCost = 1.75\\r\\n    // ns.print(targetServer)\\r\\n\\r\\n    //establish timing\\r\\n    const scriptOffset = 20\\r\\n    const batchBuffer = 500\\r\\n    var hackTime= 0\\r\\n    var weakTime= 0\\r\\n    var growTime= 0\\r\\n    var totalTime = 0\\r\\n    var potentialBatches = 0\\r\\n    var batchOffset = 0\\r\\n    var hackOffset = 0\\r\\n    var growOffset = 0\\r\\n    var weakOffset = 0\\r\\n\\r\\n    function establishTiming(){\\r\\n        hackTime= ns.getHackTime(targetServer)\\r\\n        weakTime= ns.getWeakenTime(targetServer)\\r\\n        growTime= ns.getGrowTime(targetServer)\\r\\n        totalTime = weakTime + scriptOffset * 3\\r\\n        potentialBatches = Math.floor(totalTime / ((scriptOffset * 4) + batchBuffer))\\r\\n        batchOffset = totalTime / potentialBatches\\r\\n        ns.print(\\\"potentialBatches: \\\", potentialBatches)\\r\\n        ns.print(\\\"batchOffset: \\\", batchOffset)\\r\\n        if (hackTime < growTime && growTime < weakTime) {\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            growOffset = (weakTime - growTime) + scriptOffset\\r\\n            weakOffset = scriptOffset * 2\\r\\n        } else {\\r\\n            ns.print(\\\"Timing doesn't work\\\")\\r\\n        }\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            return [potentialBatches, batchOffset, growOffset, weakOffset]\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n    var serverMoney = 0\\r\\n    var desiredHackAmount = 0\\r\\n    var desiredHackThreads = 0\\r\\n    var hackSecurityIncrease = 0\\r\\n    var weakenChange = 0\\r\\n    var weakenHackThreads = 0\\r\\n    var desiredGrowMultiplier = 0\\r\\n    var desiredGrowThreads = 0\\r\\n    var growSecurityIncrease = 0\\r\\n    var weakenGrowThreads = 0\\r\\n\\r\\n    function establishThreads() {\\r\\n        serverMoney = ns.getServerMoneyAvailable(targetServer)\\r\\n        desiredHackAmount = (serverMoney * 0.9).toExponential()\\r\\n        desiredHackThreads = Math.ceil(ns.hackAnalyzeThreads(targetServer, desiredHackAmount))\\r\\n        hackSecurityIncrease = (ns.hackAnalyzeSecurity(desiredHackThreads, targetServer) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenChange = ns.weakenAnalyze(1, 1)\\r\\n        weakenHackThreads = Math.ceil(hackSecurityIncrease / weakenChange)\\r\\n        desiredGrowMultiplier = (serverMoney / (serverMoney - desiredHackAmount)) * 1.15\\r\\n        if (!desiredGrowMultiplier){\\r\\n            desiredGrowMultiplier = 900\\r\\n        }\\r\\n        ns.print(desiredGrowMultiplier)\\r\\n        desiredGrowThreads = Math.ceil(ns.growthAnalyze(targetServer, desiredGrowMultiplier))\\r\\n        growSecurityIncrease = ((ns.growthAnalyzeSecurity(1, targetServer, 1)*desiredGrowThreads) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenGrowThreads = Math.ceil(growSecurityIncrease / weakenChange)\\r\\n        return [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads]\\r\\n    }\\r\\n\\r\\n    [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads()\\r\\n    [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n    ns.exec(\\\"single-hack.js\\\", server, 1, targetServer, 0)\\r\\n    await ns.sleep(hackTime+100)\\r\\n    \\r\\n    var batchCost = 0\\r\\n\\r\\n    while (true) {\\r\\n        [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads()\\r\\n        [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n        for (let i = 1; i < potentialBatches; i++) {\\r\\n            batchCost = (desiredHackThreads + weakenHackThreads + desiredGrowThreads + weakenGrowThreads) * scriptCost;\\r\\n            if ((ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) > batchCost){\\r\\n                if (serverMoney/ns.getServerMaxMoney(targetServer) < 0.02) {\\r\\n                    desiredHackThreads  = 1\\r\\n                }\\r\\n                ns.print(\\\"+++\\\")\\r\\n                ns.print(\\\"batch \\\", i)\\r\\n                ns.printf(\\\"hack %s with %s threads from %s with offset %s\\\", targetServer, desiredHackThreads, server, hackOffset)\\r\\n                ns.printf(\\\"weak %s with %s threads from %s with offset %s\\\", targetServer, weakenHackThreads, server, 0)\\r\\n                ns.printf(\\\"grow %s with %s threads from %s with offset %s\\\", targetServer, desiredGrowThreads, server, growOffset)\\r\\n                ns.printf(\\\"weak %s with %s threads from %s with offset %s\\\", targetServer, weakenGrowThreads, server, weakOffset)\\r\\n                ns.exec(\\\"single-hack.js\\\", server, desiredHackThreads, targetServer, hackOffset, Math.random())\\r\\n                ns.exec(\\\"single-weaken.js\\\", server, weakenHackThreads, targetServer, 0, Math.random())\\r\\n                ns.exec(\\\"single-grow.js\\\", server, desiredGrowThreads, targetServer, growOffset, Math.random())\\r\\n                ns.exec(\\\"single-weaken.js\\\", server, weakenGrowThreads, targetServer, weakOffset, Math.random())\\r\\n                await ns.sleep(batchOffset)\\r\\n            } else {\\r\\n                ns.print(\\\"Not enough ram on \\\", server)\\r\\n                ns.print(\\\"batchCost \\\", batchCost)\\r\\n                await ns.sleep(batchOffset)\\r\\n                break\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n}\",\"filename\":\"/utilities/script-batch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.45,\"server\":\"home\",\"moduleSequenceNumber\":133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.exec(\\\"batch-job.js\\\", \\\"home\\\", 1, \\\"node\\\", \\\"phantasy\\\")\\r\\n}\",\"filename\":\"scratch.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"scratch.js\",\"url\":\"blob:file:///98771c1a-df39-4a29-ba98-a5c1ae79c60d\",\"moduleSequenceNumber\":55955}],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"home\",\"moduleSequenceNumber\":134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"node\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"73.0.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":32513440312,\"moneyMax\":812836007800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1067,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"4.4.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":57963437038,\"moneyMax\":1449085925950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1224,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"87.7.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":29201118268,\"moneyMax\":730027956700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1104,\"serverGrowth\":60}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"74.8.9.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":32096500675,\"moneyMax\":802412516875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1049,\"serverGrowth\":72}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"62.5.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":22660031769,\"moneyMax\":566500794225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":968,\"serverGrowth\":90}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"51.7.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":16605129126,\"moneyMax\":415128228150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1214,\"serverGrowth\":53}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"53.9.6.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":19337680655,\"moneyMax\":483442016375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":941,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"40.2.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":16361955227,\"moneyMax\":409048880675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1046,\"serverGrowth\":77}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"71.4.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":25463508366,\"moneyMax\":636587709150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1219,\"serverGrowth\":97}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"9.2.6.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1659506447,\"moneyMax\":41487661175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":993,\"serverGrowth\":81}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"72.9.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1417,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"98.4.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":1029778620,\"moneyMax\":25744465500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":907,\"serverGrowth\":75}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"59.3.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":902358975,\"moneyMax\":22558974375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":910,\"serverGrowth\":51}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"2.9.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":810703334,\"moneyMax\":20267583350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":920,\"serverGrowth\":70}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"11.3.0.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":654600798,\"moneyMax\":16365019950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":75}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"20.3.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":760764072,\"moneyMax\":19019101800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":783,\"serverGrowth\":75}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"62.8.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":961417669,\"moneyMax\":24035441725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":908,\"serverGrowth\":85}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"0.3.6.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1103853960,\"moneyMax\":27596349000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"42.6.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":770948138,\"moneyMax\":19273703450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":834,\"serverGrowth\":62}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-23829.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"BBBBBBJJyyyyyLLLLLLQQQQWWcQooccXXXXXXeDLLPY66666PP6SDDnnIz23333333xnwxMMMMMBBBBYY\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"29.5.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":567284289,\"moneyMax\":14182107225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":833,\"serverGrowth\":88}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-918502-FoodNStuff.cct\",\"type\":\"Array Jumping Game\",\"data\":[1,5,7,0,3,10,0,9,0,1,0,2,8,0,3,7,5,4],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"5.2.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":880692940,\"moneyMax\":22017323500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":917,\"serverGrowth\":75}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-357499.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9lnXIw6iuf141c527lR7c62g723I70473Nmx927DUmTsrs960816thfsfV386TSmCLJ\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"59.0.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":835245417,\"moneyMax\":20881135425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":829,\"serverGrowth\":73}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-182707-Joe'sGuns.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[52,[1,3,5,7,8,9,15,23,24]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"38.6.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1171727155,\"moneyMax\":29293178875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":867,\"serverGrowth\":65}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-115657-FoodNStuff.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,9],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"11.5.0.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":934202478,\"moneyMax\":23355061950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":854,\"serverGrowth\":61}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"37.7.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":1091654556,\"moneyMax\":27291363900,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":785,\"serverGrowth\":71}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"8.2.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":722074744,\"moneyMax\":18051868600,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":848,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-213904-Joe'sGuns.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":27089966690,\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"11.5.6.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":878921298,\"moneyMax\":21973032450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":763,\"serverGrowth\":70}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-634333-FoodNStuff.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a)))(a())()()(a)\",\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"11.3.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1565585563,\"moneyMax\":39139639075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":852,\"serverGrowth\":63}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"16.3.8.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1640873853,\"moneyMax\":41021846325,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":752,\"serverGrowth\":87}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"6.4.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":1188823783,\"moneyMax\":29720594575,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":781,\"serverGrowth\":72}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-985487-FoodNStuff.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"831311783435\",40],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"70.4.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1441387413,\"moneyMax\":36034685325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":821,\"serverGrowth\":76}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-429369-FoodNStuff.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,10,0,6,3,6,4,6,3],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"84.6.7.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1080664846,\"moneyMax\":27016621150,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":798,\"serverGrowth\":78}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-592885-FoodNStuff.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"19481\",-79],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"43.9.9.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":709328642,\"moneyMax\":17733216050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":688,\"serverGrowth\":60}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-416335-Joe'sGuns.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"7G4D0sY4760421J267sW2iev53351h66e455Z0NcP6855Z04X717SgToiHs\",\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"32.4.5.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":524267636,\"moneyMax\":13106690900,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":504,\"serverGrowth\":49}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-765259-FoodNStuff.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":222186653,\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"37.1.9.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":667247130,\"moneyMax\":16681178250,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":568,\"serverGrowth\":54}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"66.3.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":278756685,\"moneyMax\":6968917125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":409,\"serverGrowth\":37}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"1.2.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":219788095,\"moneyMax\":5494702375,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":370,\"serverGrowth\":42}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"21.7.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":1086448006,\"moneyMax\":27161200150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":756,\"serverGrowth\":77}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"57.5.7.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":279327193,\"moneyMax\":6983179825,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":449,\"serverGrowth\":56}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-934261-FoodNStuff.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[2,4],[21,24],[22,29],[23,32],[16,24],[18,28],[2,9],[19,26],[3,6],[13,16],[17,27],[7,16],[24,31],[22,25],[16,17],[25,27]],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-252246.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[90,121,51,156,71,106,91,6,99,84,2,94,99,119,169,191,38,182,50,26,99,26,170,143,123,138,172,38,51],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"80.7.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":422600089,\"moneyMax\":10565002225,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":615,\"serverGrowth\":64}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"99.5.9.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":439384356,\"moneyMax\":10984608900,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":410,\"serverGrowth\":52}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"4.2.1.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":194462187,\"moneyMax\":4861554675,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":318,\"serverGrowth\":49}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"65.4.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":237129247,\"moneyMax\":5928231175,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":330,\"serverGrowth\":56}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"92.8.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":399,\"serverGrowth\":45}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"30.4.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"summit-uni\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":72916893,\"moneyMax\":1822922325,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":252,\"serverGrowth\":39}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-133246-Joe'sGuns.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[9,3],[8,4,8],[5,1,9,5],[8,2,1,2,3],[2,2,7,3,3,6],[1,9,4,1,7,9,6],[7,8,9,4,3,6,3,1],[8,4,4,3,5,6,6,4,6],[1,6,1,2,2,8,5,5,1,9],[3,4,6,9,1,6,3,4,1,7,9],[5,8,3,4,5,2,9,5,6,7,4,8]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"40.1.5.9\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",200],\"dataMap\":{\"joesguns\":[0,0,6,0]},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":55.800000000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.8099999999982,\"pid\":1192,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.hack(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":2874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.grow(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ed77867f-c59c-4742-8fd3-eacc16de66e5\",\"moduleSequenceNumber\":3168}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":3168,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\t// ns.print(ns.args.length);\\r\\n\\twhile(true) {\\r\\n\\t\\tawait ns.weaken(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":2876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, (hackingChance*100).toFixed(2), (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.15) {\\r\\n\\t\\t\\t// ns.print(\\\"weakening \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.60) {\\r\\n\\t\\t\\t// ns.print(\\\"growing \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"oversight.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"n00dles\",\"moduleSequenceNumber\":2877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    // ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, hackingChance*100, (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.9) {\\r\\n\\t\\t\\tns.print(\\\"weakening \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.75) {\\r\\n\\t\\t\\tns.print(\\\"growing \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"aio.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"n00dles\",\"moduleSequenceNumber\":2878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.hack(server)\\r\\n}\",\"filename\":\"single-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":2879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.grow(server)\\r\\n}\",\"filename\":\"single-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":2880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.weaken(server)\\r\\n}\",\"filename\":\"single-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":2881,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.share()\\r\\n\\t}\\r\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"n00dles\",\"moduleSequenceNumber\":2882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//hack\\r\\n//weaken\\r\\n//grow\\r\\n//weaken\\r\\n//establish target\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // ns.tail()\\r\\n    ns.disableLog(\\\"ALL\\\")\\r\\n    ns.print(\\\"---\\\")\\r\\n    var server = ns.args[0]\\r\\n    var targetServer = ns.args[1]\\r\\n    const scriptCost = 1.75\\r\\n    // try {\\r\\n    //     ns.exec(\\\"no-hack.js\\\", \\\"home\\\", 1, targetServer)\\r\\n    // } catch {\\r\\n    //     ns.print(\\\"Maybe it's already running\\\")\\r\\n    // }\\r\\n    // ns.print(targetServer)\\r\\n\\r\\n    //establish timing\\r\\n    const scriptOffset = 20\\r\\n    const batchBuffer = 500\\r\\n    var hackTime= 0\\r\\n    var weakTime= 0\\r\\n    var growTime= 0\\r\\n    var totalTime = 0\\r\\n    var potentialBatches = 0\\r\\n    var batchOffset = 0\\r\\n    var hackOffset = 0\\r\\n    var growOffset = 0\\r\\n    var weakOffset = 0\\r\\n\\r\\n    function establishTiming(){\\r\\n        hackTime= ns.getHackTime(targetServer)\\r\\n        weakTime= ns.getWeakenTime(targetServer)\\r\\n        growTime= ns.getGrowTime(targetServer)\\r\\n        totalTime = weakTime + scriptOffset * 3\\r\\n        potentialBatches = Math.floor(totalTime / ((scriptOffset * 4) + batchBuffer))\\r\\n        batchOffset = totalTime / potentialBatches\\r\\n        // ns.print(\\\"potentialBatches: \\\", potentialBatches)\\r\\n        // ns.print(\\\"batchOffset: \\\", batchOffset)\\r\\n        if (hackTime < growTime && growTime < weakTime) {\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            growOffset = (weakTime - growTime) + scriptOffset\\r\\n            weakOffset = scriptOffset * 2\\r\\n        } else {\\r\\n            ns.print(\\\"Timing doesn't work\\\")\\r\\n        }\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            return [potentialBatches, batchOffset, growOffset, weakOffset]\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n    var serverMoney = 0\\r\\n    var desiredHackAmount = 0\\r\\n    var desiredHackThreads = 0\\r\\n    var hackSecurityIncrease = 0\\r\\n    var weakenChange = 0\\r\\n    var weakenHackThreads = 0\\r\\n    var desiredGrowMultiplier = 0\\r\\n    var desiredGrowThreads = 0\\r\\n    var growSecurityIncrease = 0\\r\\n    var weakenGrowThreads = 0\\r\\n\\r\\n    function establishThreads(hackTarget) {\\r\\n        serverMoney = ns.getServerMoneyAvailable(targetServer)\\r\\n        desiredHackAmount = (serverMoney * hackTarget)\\r\\n        desiredHackThreads = Math.ceil(ns.hackAnalyzeThreads(targetServer, desiredHackAmount))\\r\\n        hackSecurityIncrease = (ns.hackAnalyzeSecurity(desiredHackThreads, targetServer) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenChange = ns.weakenAnalyze(1, 1)\\r\\n        weakenHackThreads = Math.ceil(hackSecurityIncrease / weakenChange)\\r\\n        desiredGrowMultiplier = (serverMoney / (serverMoney - desiredHackAmount))\\r\\n        if (!desiredGrowMultiplier){\\r\\n            desiredGrowMultiplier = 900\\r\\n        } else if (desiredGrowMultiplier < 1) {\\r\\n            desiredGrowMultiplier = 1\\r\\n        }\\r\\n        desiredGrowThreads = Math.ceil(ns.growthAnalyze(targetServer, desiredGrowMultiplier*1.15))\\r\\n        growSecurityIncrease = ((ns.growthAnalyzeSecurity(1, targetServer, 1)*desiredGrowThreads) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenGrowThreads = Math.ceil(growSecurityIncrease*1.15 / weakenChange)\\r\\n        // ns.print(\\\"desiredGrowMultiplier \\\", desiredGrowMultiplier)\\r\\n        // ns.print(\\\"desiredGrowThreads \\\", desiredGrowThreads)\\r\\n        return [desiredHackThreads+1, weakenHackThreads+1, desiredGrowThreads+1, weakenGrowThreads+1];\\r\\n    }\\r\\n\\r\\n    // [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n    [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n    // ns.exec(\\\"single-hack.js\\\", server, 1, targetServer, 0)\\r\\n    // await ns.sleep(hackTime+100)\\r\\n    \\r\\n    var batchCost = 16\\r\\n\\r\\n    while (true) {\\r\\n        // var spaceAvailable = true\\r\\n        var hackTarget = 0.90\\r\\n        // ns.printf(\\\"desiredGrowThreads %s\\\", desiredGrowThreads)\\r\\n        let [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n        for (let i = 1; i < potentialBatches; i++) {\\r\\n            while (batchCost >= 16 && hackTarget > 0.05) {\\r\\n                let [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n                batchCost = (desiredHackThreads + weakenHackThreads + desiredGrowThreads + weakenGrowThreads) * scriptCost;\\r\\n                if ((ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) > batchCost){\\r\\n                    if (serverMoney/ns.getServerMaxMoney(targetServer) <= 0.10) {\\r\\n                        desiredHackThreads  = 1\\r\\n                    }\\r\\n                    ns.print(\\\"+++\\\")\\r\\n                    ns.printf(\\\"Hacking for %s\\\", hackTarget*100)\\r\\n                    // ns.print(\\\"batch \\\", i)\\r\\n                    ns.printf(\\\"hack %s with %s threads from %s\\\", targetServer, desiredHackThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenHackThreads, server)\\r\\n                    ns.printf(\\\"grow %s with %s threads from %s\\\", targetServer, desiredGrowThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenGrowThreads, server)\\r\\n                    ns.exec(\\\"single-hack.js\\\", server, desiredHackThreads, targetServer, hackOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenHackThreads, targetServer, 0, Math.random())\\r\\n                    ns.exec(\\\"single-grow.js\\\", server, desiredGrowThreads, targetServer, growOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenGrowThreads, targetServer, weakOffset, Math.random())\\r\\n                    // spaceAvailable = true\\r\\n                    await ns.sleep(batchOffset)\\r\\n                } else {\\r\\n                    // ns.print(\\\"Not enough ram on \\\", server)\\r\\n                    // ns.print(\\\"batchCost \\\", batchCost)\\r\\n                    // ns.printf(\\\"desiredHackThreads: %s, %s\\\",desiredHackThreads,desiredHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenHackThreads: %s, %s\\\",weakenHackThreads,weakenHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"desiredGrowThreads: %s, %s\\\",desiredGrowThreads,desiredGrowThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenGrowThreads: %s, %s\\\",weakenGrowThreads,weakenGrowThreads*scriptCost)\\r\\n                    // spaceAvailable = false\\r\\n                    hackTarget = hackTarget / 2\\r\\n                    // ns.print(\\\"hackTarget: \\\",hackTarget)\\r\\n                    await ns.sleep(60)\\r\\n                    break\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // ns.printf(\\\"Sleeping for %sms\\\", batchOffset)\\r\\n        await ns.sleep(batchOffset)\\r\\n    }\\r\\n    \\r\\n}\",\"filename\":\"batch-job.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.45,\"server\":\"n00dles\",\"moduleSequenceNumber\":2883,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"90.9.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",0],\"dataMap\":{\"joesguns\":[0,0,0,9]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":83.7,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.01000000000059,\"pid\":1345,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///648408fe-3373-4e70-81d0-3289826b973f\",\"moduleSequenceNumber\":3182}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.hack(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":2894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.grow(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///078fc29a-d174-441c-8cd3-ce15707ca2e8\",\"moduleSequenceNumber\":3169}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":3169,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\t// ns.print(ns.args.length);\\r\\n\\twhile(true) {\\r\\n\\t\\tawait ns.weaken(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///648408fe-3373-4e70-81d0-3289826b973f\",\"moduleSequenceNumber\":3182}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":3182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, (hackingChance*100).toFixed(2), (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.15) {\\r\\n\\t\\t\\t// ns.print(\\\"weakening \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.60) {\\r\\n\\t\\t\\t// ns.print(\\\"growing \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"oversight.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":2897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    // ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, hackingChance*100, (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.9) {\\r\\n\\t\\t\\tns.print(\\\"weakening \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.75) {\\r\\n\\t\\t\\tns.print(\\\"growing \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"aio.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":2898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.hack(server)\\r\\n}\",\"filename\":\"single-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":2899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.grow(server)\\r\\n}\",\"filename\":\"single-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":2900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.weaken(server)\\r\\n}\",\"filename\":\"single-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":2901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.share()\\r\\n\\t}\\r\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":2902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//hack\\r\\n//weaken\\r\\n//grow\\r\\n//weaken\\r\\n//establish target\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // ns.tail()\\r\\n    ns.disableLog(\\\"ALL\\\")\\r\\n    ns.print(\\\"---\\\")\\r\\n    var server = ns.args[0]\\r\\n    var targetServer = ns.args[1]\\r\\n    const scriptCost = 1.75\\r\\n    // try {\\r\\n    //     ns.exec(\\\"no-hack.js\\\", \\\"home\\\", 1, targetServer)\\r\\n    // } catch {\\r\\n    //     ns.print(\\\"Maybe it's already running\\\")\\r\\n    // }\\r\\n    // ns.print(targetServer)\\r\\n\\r\\n    //establish timing\\r\\n    const scriptOffset = 20\\r\\n    const batchBuffer = 500\\r\\n    var hackTime= 0\\r\\n    var weakTime= 0\\r\\n    var growTime= 0\\r\\n    var totalTime = 0\\r\\n    var potentialBatches = 0\\r\\n    var batchOffset = 0\\r\\n    var hackOffset = 0\\r\\n    var growOffset = 0\\r\\n    var weakOffset = 0\\r\\n\\r\\n    function establishTiming(){\\r\\n        hackTime= ns.getHackTime(targetServer)\\r\\n        weakTime= ns.getWeakenTime(targetServer)\\r\\n        growTime= ns.getGrowTime(targetServer)\\r\\n        totalTime = weakTime + scriptOffset * 3\\r\\n        potentialBatches = Math.floor(totalTime / ((scriptOffset * 4) + batchBuffer))\\r\\n        batchOffset = totalTime / potentialBatches\\r\\n        // ns.print(\\\"potentialBatches: \\\", potentialBatches)\\r\\n        // ns.print(\\\"batchOffset: \\\", batchOffset)\\r\\n        if (hackTime < growTime && growTime < weakTime) {\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            growOffset = (weakTime - growTime) + scriptOffset\\r\\n            weakOffset = scriptOffset * 2\\r\\n        } else {\\r\\n            ns.print(\\\"Timing doesn't work\\\")\\r\\n        }\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            return [potentialBatches, batchOffset, growOffset, weakOffset]\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n    var serverMoney = 0\\r\\n    var desiredHackAmount = 0\\r\\n    var desiredHackThreads = 0\\r\\n    var hackSecurityIncrease = 0\\r\\n    var weakenChange = 0\\r\\n    var weakenHackThreads = 0\\r\\n    var desiredGrowMultiplier = 0\\r\\n    var desiredGrowThreads = 0\\r\\n    var growSecurityIncrease = 0\\r\\n    var weakenGrowThreads = 0\\r\\n\\r\\n    function establishThreads(hackTarget) {\\r\\n        serverMoney = ns.getServerMoneyAvailable(targetServer)\\r\\n        desiredHackAmount = (serverMoney * hackTarget)\\r\\n        desiredHackThreads = Math.ceil(ns.hackAnalyzeThreads(targetServer, desiredHackAmount))\\r\\n        hackSecurityIncrease = (ns.hackAnalyzeSecurity(desiredHackThreads, targetServer) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenChange = ns.weakenAnalyze(1, 1)\\r\\n        weakenHackThreads = Math.ceil(hackSecurityIncrease / weakenChange)\\r\\n        desiredGrowMultiplier = (serverMoney / (serverMoney - desiredHackAmount))\\r\\n        if (!desiredGrowMultiplier){\\r\\n            desiredGrowMultiplier = 900\\r\\n        } else if (desiredGrowMultiplier < 1) {\\r\\n            desiredGrowMultiplier = 1\\r\\n        }\\r\\n        desiredGrowThreads = Math.ceil(ns.growthAnalyze(targetServer, desiredGrowMultiplier*1.15))\\r\\n        growSecurityIncrease = ((ns.growthAnalyzeSecurity(1, targetServer, 1)*desiredGrowThreads) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenGrowThreads = Math.ceil(growSecurityIncrease*1.15 / weakenChange)\\r\\n        // ns.print(\\\"desiredGrowMultiplier \\\", desiredGrowMultiplier)\\r\\n        // ns.print(\\\"desiredGrowThreads \\\", desiredGrowThreads)\\r\\n        return [desiredHackThreads+1, weakenHackThreads+1, desiredGrowThreads+1, weakenGrowThreads+1];\\r\\n    }\\r\\n\\r\\n    // [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n    [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n    // ns.exec(\\\"single-hack.js\\\", server, 1, targetServer, 0)\\r\\n    // await ns.sleep(hackTime+100)\\r\\n    \\r\\n    var batchCost = 16\\r\\n\\r\\n    while (true) {\\r\\n        // var spaceAvailable = true\\r\\n        var hackTarget = 0.90\\r\\n        // ns.printf(\\\"desiredGrowThreads %s\\\", desiredGrowThreads)\\r\\n        let [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n        for (let i = 1; i < potentialBatches; i++) {\\r\\n            while (batchCost >= 16 && hackTarget > 0.05) {\\r\\n                let [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n                batchCost = (desiredHackThreads + weakenHackThreads + desiredGrowThreads + weakenGrowThreads) * scriptCost;\\r\\n                if ((ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) > batchCost){\\r\\n                    if (serverMoney/ns.getServerMaxMoney(targetServer) <= 0.10) {\\r\\n                        desiredHackThreads  = 1\\r\\n                    }\\r\\n                    ns.print(\\\"+++\\\")\\r\\n                    ns.printf(\\\"Hacking for %s\\\", hackTarget*100)\\r\\n                    // ns.print(\\\"batch \\\", i)\\r\\n                    ns.printf(\\\"hack %s with %s threads from %s\\\", targetServer, desiredHackThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenHackThreads, server)\\r\\n                    ns.printf(\\\"grow %s with %s threads from %s\\\", targetServer, desiredGrowThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenGrowThreads, server)\\r\\n                    ns.exec(\\\"single-hack.js\\\", server, desiredHackThreads, targetServer, hackOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenHackThreads, targetServer, 0, Math.random())\\r\\n                    ns.exec(\\\"single-grow.js\\\", server, desiredGrowThreads, targetServer, growOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenGrowThreads, targetServer, weakOffset, Math.random())\\r\\n                    // spaceAvailable = true\\r\\n                    await ns.sleep(batchOffset)\\r\\n                } else {\\r\\n                    // ns.print(\\\"Not enough ram on \\\", server)\\r\\n                    // ns.print(\\\"batchCost \\\", batchCost)\\r\\n                    // ns.printf(\\\"desiredHackThreads: %s, %s\\\",desiredHackThreads,desiredHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenHackThreads: %s, %s\\\",weakenHackThreads,weakenHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"desiredGrowThreads: %s, %s\\\",desiredGrowThreads,desiredGrowThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenGrowThreads: %s, %s\\\",weakenGrowThreads,weakenGrowThreads*scriptCost)\\r\\n                    // spaceAvailable = false\\r\\n                    hackTarget = hackTarget / 2\\r\\n                    // ns.print(\\\"hackTarget: \\\",hackTarget)\\r\\n                    await ns.sleep(60)\\r\\n                    break\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // ns.printf(\\\"Sleeping for %sms\\\", batchOffset)\\r\\n        await ns.sleep(batchOffset)\\r\\n    }\\r\\n    \\r\\n}\",\"filename\":\"batch-job.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.45,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":2903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-790827-Joe'sGuns.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[90,134,163,195,172,32,130,146,127,183,168,27,99,32,86,85,166,173,102,149,195,91,103,79,166,4,106,71,81,138,48,27,61,85,115,41,151],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"42.1.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",200],\"dataMap\":{\"joesguns\":[0,0,27,0]},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":251.10000000000002,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.8099999999982,\"pid\":1197,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.hack(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":2974,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.grow(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f03d3957-b888-430b-a761-9e1d427d3b37\",\"moduleSequenceNumber\":3173}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":3173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\t// ns.print(ns.args.length);\\r\\n\\twhile(true) {\\r\\n\\t\\tawait ns.weaken(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":2976,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, (hackingChance*100).toFixed(2), (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.15) {\\r\\n\\t\\t\\t// ns.print(\\\"weakening \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.60) {\\r\\n\\t\\t\\t// ns.print(\\\"growing \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"oversight.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":2977,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    // ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, hackingChance*100, (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.9) {\\r\\n\\t\\t\\tns.print(\\\"weakening \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.75) {\\r\\n\\t\\t\\tns.print(\\\"growing \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"aio.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":2978,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.hack(server)\\r\\n}\",\"filename\":\"single-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":2979,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.grow(server)\\r\\n}\",\"filename\":\"single-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":2980,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.weaken(server)\\r\\n}\",\"filename\":\"single-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":2981,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.share()\\r\\n\\t}\\r\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":2982,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//hack\\r\\n//weaken\\r\\n//grow\\r\\n//weaken\\r\\n//establish target\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // ns.tail()\\r\\n    ns.disableLog(\\\"ALL\\\")\\r\\n    ns.print(\\\"---\\\")\\r\\n    var server = ns.args[0]\\r\\n    var targetServer = ns.args[1]\\r\\n    const scriptCost = 1.75\\r\\n    // try {\\r\\n    //     ns.exec(\\\"no-hack.js\\\", \\\"home\\\", 1, targetServer)\\r\\n    // } catch {\\r\\n    //     ns.print(\\\"Maybe it's already running\\\")\\r\\n    // }\\r\\n    // ns.print(targetServer)\\r\\n\\r\\n    //establish timing\\r\\n    const scriptOffset = 20\\r\\n    const batchBuffer = 500\\r\\n    var hackTime= 0\\r\\n    var weakTime= 0\\r\\n    var growTime= 0\\r\\n    var totalTime = 0\\r\\n    var potentialBatches = 0\\r\\n    var batchOffset = 0\\r\\n    var hackOffset = 0\\r\\n    var growOffset = 0\\r\\n    var weakOffset = 0\\r\\n\\r\\n    function establishTiming(){\\r\\n        hackTime= ns.getHackTime(targetServer)\\r\\n        weakTime= ns.getWeakenTime(targetServer)\\r\\n        growTime= ns.getGrowTime(targetServer)\\r\\n        totalTime = weakTime + scriptOffset * 3\\r\\n        potentialBatches = Math.floor(totalTime / ((scriptOffset * 4) + batchBuffer))\\r\\n        batchOffset = totalTime / potentialBatches\\r\\n        // ns.print(\\\"potentialBatches: \\\", potentialBatches)\\r\\n        // ns.print(\\\"batchOffset: \\\", batchOffset)\\r\\n        if (hackTime < growTime && growTime < weakTime) {\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            growOffset = (weakTime - growTime) + scriptOffset\\r\\n            weakOffset = scriptOffset * 2\\r\\n        } else {\\r\\n            ns.print(\\\"Timing doesn't work\\\")\\r\\n        }\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            return [potentialBatches, batchOffset, growOffset, weakOffset]\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n    var serverMoney = 0\\r\\n    var desiredHackAmount = 0\\r\\n    var desiredHackThreads = 0\\r\\n    var hackSecurityIncrease = 0\\r\\n    var weakenChange = 0\\r\\n    var weakenHackThreads = 0\\r\\n    var desiredGrowMultiplier = 0\\r\\n    var desiredGrowThreads = 0\\r\\n    var growSecurityIncrease = 0\\r\\n    var weakenGrowThreads = 0\\r\\n\\r\\n    function establishThreads(hackTarget) {\\r\\n        serverMoney = ns.getServerMoneyAvailable(targetServer)\\r\\n        desiredHackAmount = (serverMoney * hackTarget)\\r\\n        desiredHackThreads = Math.ceil(ns.hackAnalyzeThreads(targetServer, desiredHackAmount))\\r\\n        hackSecurityIncrease = (ns.hackAnalyzeSecurity(desiredHackThreads, targetServer) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenChange = ns.weakenAnalyze(1, 1)\\r\\n        weakenHackThreads = Math.ceil(hackSecurityIncrease / weakenChange)\\r\\n        desiredGrowMultiplier = (serverMoney / (serverMoney - desiredHackAmount))\\r\\n        if (!desiredGrowMultiplier){\\r\\n            desiredGrowMultiplier = 900\\r\\n        } else if (desiredGrowMultiplier < 1) {\\r\\n            desiredGrowMultiplier = 1\\r\\n        }\\r\\n        desiredGrowThreads = Math.ceil(ns.growthAnalyze(targetServer, desiredGrowMultiplier*1.15))\\r\\n        growSecurityIncrease = ((ns.growthAnalyzeSecurity(1, targetServer, 1)*desiredGrowThreads) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenGrowThreads = Math.ceil(growSecurityIncrease*1.15 / weakenChange)\\r\\n        // ns.print(\\\"desiredGrowMultiplier \\\", desiredGrowMultiplier)\\r\\n        // ns.print(\\\"desiredGrowThreads \\\", desiredGrowThreads)\\r\\n        return [desiredHackThreads+1, weakenHackThreads+1, desiredGrowThreads+1, weakenGrowThreads+1];\\r\\n    }\\r\\n\\r\\n    // [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n    [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n    // ns.exec(\\\"single-hack.js\\\", server, 1, targetServer, 0)\\r\\n    // await ns.sleep(hackTime+100)\\r\\n    \\r\\n    var batchCost = 16\\r\\n\\r\\n    while (true) {\\r\\n        // var spaceAvailable = true\\r\\n        var hackTarget = 0.90\\r\\n        // ns.printf(\\\"desiredGrowThreads %s\\\", desiredGrowThreads)\\r\\n        let [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n        for (let i = 1; i < potentialBatches; i++) {\\r\\n            while (batchCost >= 16 && hackTarget > 0.05) {\\r\\n                let [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n                batchCost = (desiredHackThreads + weakenHackThreads + desiredGrowThreads + weakenGrowThreads) * scriptCost;\\r\\n                if ((ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) > batchCost){\\r\\n                    if (serverMoney/ns.getServerMaxMoney(targetServer) <= 0.10) {\\r\\n                        desiredHackThreads  = 1\\r\\n                    }\\r\\n                    ns.print(\\\"+++\\\")\\r\\n                    ns.printf(\\\"Hacking for %s\\\", hackTarget*100)\\r\\n                    // ns.print(\\\"batch \\\", i)\\r\\n                    ns.printf(\\\"hack %s with %s threads from %s\\\", targetServer, desiredHackThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenHackThreads, server)\\r\\n                    ns.printf(\\\"grow %s with %s threads from %s\\\", targetServer, desiredGrowThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenGrowThreads, server)\\r\\n                    ns.exec(\\\"single-hack.js\\\", server, desiredHackThreads, targetServer, hackOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenHackThreads, targetServer, 0, Math.random())\\r\\n                    ns.exec(\\\"single-grow.js\\\", server, desiredGrowThreads, targetServer, growOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenGrowThreads, targetServer, weakOffset, Math.random())\\r\\n                    // spaceAvailable = true\\r\\n                    await ns.sleep(batchOffset)\\r\\n                } else {\\r\\n                    // ns.print(\\\"Not enough ram on \\\", server)\\r\\n                    // ns.print(\\\"batchCost \\\", batchCost)\\r\\n                    // ns.printf(\\\"desiredHackThreads: %s, %s\\\",desiredHackThreads,desiredHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenHackThreads: %s, %s\\\",weakenHackThreads,weakenHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"desiredGrowThreads: %s, %s\\\",desiredGrowThreads,desiredGrowThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenGrowThreads: %s, %s\\\",weakenGrowThreads,weakenGrowThreads*scriptCost)\\r\\n                    // spaceAvailable = false\\r\\n                    hackTarget = hackTarget / 2\\r\\n                    // ns.print(\\\"hackTarget: \\\",hackTarget)\\r\\n                    await ns.sleep(60)\\r\\n                    break\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // ns.printf(\\\"Sleeping for %sms\\\", batchOffset)\\r\\n        await ns.sleep(batchOffset)\\r\\n    }\\r\\n    \\r\\n}\",\"filename\":\"batch-job.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.45,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":2983,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"88.0.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",200],\"dataMap\":{\"joesguns\":[0,0,27,0]},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":251.10000000000002,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.8099999999982,\"pid\":1198,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.hack(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":2994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.grow(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e9ddb60b-0900-4707-84b3-0a63cd216dcd\",\"moduleSequenceNumber\":3174}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":3174,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\t// ns.print(ns.args.length);\\r\\n\\twhile(true) {\\r\\n\\t\\tawait ns.weaken(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":2996,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, (hackingChance*100).toFixed(2), (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.15) {\\r\\n\\t\\t\\t// ns.print(\\\"weakening \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.60) {\\r\\n\\t\\t\\t// ns.print(\\\"growing \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"oversight.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"joesguns\",\"moduleSequenceNumber\":2997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    // ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, hackingChance*100, (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.9) {\\r\\n\\t\\t\\tns.print(\\\"weakening \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.75) {\\r\\n\\t\\t\\tns.print(\\\"growing \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"aio.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"joesguns\",\"moduleSequenceNumber\":2998,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.hack(server)\\r\\n}\",\"filename\":\"single-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":2999,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.grow(server)\\r\\n}\",\"filename\":\"single-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":3000,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.weaken(server)\\r\\n}\",\"filename\":\"single-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":3001,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.share()\\r\\n\\t}\\r\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"joesguns\",\"moduleSequenceNumber\":3002,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//hack\\r\\n//weaken\\r\\n//grow\\r\\n//weaken\\r\\n//establish target\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // ns.tail()\\r\\n    ns.disableLog(\\\"ALL\\\")\\r\\n    ns.print(\\\"---\\\")\\r\\n    var server = ns.args[0]\\r\\n    var targetServer = ns.args[1]\\r\\n    const scriptCost = 1.75\\r\\n    // try {\\r\\n    //     ns.exec(\\\"no-hack.js\\\", \\\"home\\\", 1, targetServer)\\r\\n    // } catch {\\r\\n    //     ns.print(\\\"Maybe it's already running\\\")\\r\\n    // }\\r\\n    // ns.print(targetServer)\\r\\n\\r\\n    //establish timing\\r\\n    const scriptOffset = 20\\r\\n    const batchBuffer = 500\\r\\n    var hackTime= 0\\r\\n    var weakTime= 0\\r\\n    var growTime= 0\\r\\n    var totalTime = 0\\r\\n    var potentialBatches = 0\\r\\n    var batchOffset = 0\\r\\n    var hackOffset = 0\\r\\n    var growOffset = 0\\r\\n    var weakOffset = 0\\r\\n\\r\\n    function establishTiming(){\\r\\n        hackTime= ns.getHackTime(targetServer)\\r\\n        weakTime= ns.getWeakenTime(targetServer)\\r\\n        growTime= ns.getGrowTime(targetServer)\\r\\n        totalTime = weakTime + scriptOffset * 3\\r\\n        potentialBatches = Math.floor(totalTime / ((scriptOffset * 4) + batchBuffer))\\r\\n        batchOffset = totalTime / potentialBatches\\r\\n        // ns.print(\\\"potentialBatches: \\\", potentialBatches)\\r\\n        // ns.print(\\\"batchOffset: \\\", batchOffset)\\r\\n        if (hackTime < growTime && growTime < weakTime) {\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            growOffset = (weakTime - growTime) + scriptOffset\\r\\n            weakOffset = scriptOffset * 2\\r\\n        } else {\\r\\n            ns.print(\\\"Timing doesn't work\\\")\\r\\n        }\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            return [potentialBatches, batchOffset, growOffset, weakOffset]\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n    var serverMoney = 0\\r\\n    var desiredHackAmount = 0\\r\\n    var desiredHackThreads = 0\\r\\n    var hackSecurityIncrease = 0\\r\\n    var weakenChange = 0\\r\\n    var weakenHackThreads = 0\\r\\n    var desiredGrowMultiplier = 0\\r\\n    var desiredGrowThreads = 0\\r\\n    var growSecurityIncrease = 0\\r\\n    var weakenGrowThreads = 0\\r\\n\\r\\n    function establishThreads(hackTarget) {\\r\\n        serverMoney = ns.getServerMoneyAvailable(targetServer)\\r\\n        desiredHackAmount = (serverMoney * hackTarget)\\r\\n        desiredHackThreads = Math.ceil(ns.hackAnalyzeThreads(targetServer, desiredHackAmount))\\r\\n        hackSecurityIncrease = (ns.hackAnalyzeSecurity(desiredHackThreads, targetServer) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenChange = ns.weakenAnalyze(1, 1)\\r\\n        weakenHackThreads = Math.ceil(hackSecurityIncrease / weakenChange)\\r\\n        desiredGrowMultiplier = (serverMoney / (serverMoney - desiredHackAmount))\\r\\n        if (!desiredGrowMultiplier){\\r\\n            desiredGrowMultiplier = 900\\r\\n        } else if (desiredGrowMultiplier < 1) {\\r\\n            desiredGrowMultiplier = 1\\r\\n        }\\r\\n        desiredGrowThreads = Math.ceil(ns.growthAnalyze(targetServer, desiredGrowMultiplier*1.15))\\r\\n        growSecurityIncrease = ((ns.growthAnalyzeSecurity(1, targetServer, 1)*desiredGrowThreads) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenGrowThreads = Math.ceil(growSecurityIncrease*1.15 / weakenChange)\\r\\n        // ns.print(\\\"desiredGrowMultiplier \\\", desiredGrowMultiplier)\\r\\n        // ns.print(\\\"desiredGrowThreads \\\", desiredGrowThreads)\\r\\n        return [desiredHackThreads+1, weakenHackThreads+1, desiredGrowThreads+1, weakenGrowThreads+1];\\r\\n    }\\r\\n\\r\\n    // [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n    [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n    // ns.exec(\\\"single-hack.js\\\", server, 1, targetServer, 0)\\r\\n    // await ns.sleep(hackTime+100)\\r\\n    \\r\\n    var batchCost = 16\\r\\n\\r\\n    while (true) {\\r\\n        // var spaceAvailable = true\\r\\n        var hackTarget = 0.90\\r\\n        // ns.printf(\\\"desiredGrowThreads %s\\\", desiredGrowThreads)\\r\\n        let [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n        for (let i = 1; i < potentialBatches; i++) {\\r\\n            while (batchCost >= 16 && hackTarget > 0.05) {\\r\\n                let [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n                batchCost = (desiredHackThreads + weakenHackThreads + desiredGrowThreads + weakenGrowThreads) * scriptCost;\\r\\n                if ((ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) > batchCost){\\r\\n                    if (serverMoney/ns.getServerMaxMoney(targetServer) <= 0.10) {\\r\\n                        desiredHackThreads  = 1\\r\\n                    }\\r\\n                    ns.print(\\\"+++\\\")\\r\\n                    ns.printf(\\\"Hacking for %s\\\", hackTarget*100)\\r\\n                    // ns.print(\\\"batch \\\", i)\\r\\n                    ns.printf(\\\"hack %s with %s threads from %s\\\", targetServer, desiredHackThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenHackThreads, server)\\r\\n                    ns.printf(\\\"grow %s with %s threads from %s\\\", targetServer, desiredGrowThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenGrowThreads, server)\\r\\n                    ns.exec(\\\"single-hack.js\\\", server, desiredHackThreads, targetServer, hackOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenHackThreads, targetServer, 0, Math.random())\\r\\n                    ns.exec(\\\"single-grow.js\\\", server, desiredGrowThreads, targetServer, growOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenGrowThreads, targetServer, weakOffset, Math.random())\\r\\n                    // spaceAvailable = true\\r\\n                    await ns.sleep(batchOffset)\\r\\n                } else {\\r\\n                    // ns.print(\\\"Not enough ram on \\\", server)\\r\\n                    // ns.print(\\\"batchCost \\\", batchCost)\\r\\n                    // ns.printf(\\\"desiredHackThreads: %s, %s\\\",desiredHackThreads,desiredHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenHackThreads: %s, %s\\\",weakenHackThreads,weakenHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"desiredGrowThreads: %s, %s\\\",desiredGrowThreads,desiredGrowThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenGrowThreads: %s, %s\\\",weakenGrowThreads,weakenGrowThreads*scriptCost)\\r\\n                    // spaceAvailable = false\\r\\n                    hackTarget = hackTarget / 2\\r\\n                    // ns.print(\\\"hackTarget: \\\",hackTarget)\\r\\n                    await ns.sleep(60)\\r\\n                    break\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // ns.printf(\\\"Sleeping for %sms\\\", batchOffset)\\r\\n        await ns.sleep(batchOffset)\\r\\n    }\\r\\n    \\r\\n}\",\"filename\":\"batch-job.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.45,\"server\":\"joesguns\",\"moduleSequenceNumber\":3003,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":17.335999999999945,\"minDifficulty\":5,\"moneyAvailable\":5747472.066771661,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-804535.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,-2,-8,3,9,8,5,3,-3,1,0,2,8,2,2,3,1,-8],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"53.9.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",200],\"dataMap\":{\"joesguns\":[0,0,54,0]},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":502.20000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.8099999999982,\"pid\":1199,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.hack(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":3014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.grow(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///a7e5cd8a-336e-4ded-9d4c-caefe548126f\",\"moduleSequenceNumber\":3175}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":3175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\t// ns.print(ns.args.length);\\r\\n\\twhile(true) {\\r\\n\\t\\tawait ns.weaken(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":3016,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, (hackingChance*100).toFixed(2), (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.15) {\\r\\n\\t\\t\\t// ns.print(\\\"weakening \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.60) {\\r\\n\\t\\t\\t// ns.print(\\\"growing \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"oversight.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"zer0\",\"moduleSequenceNumber\":3017,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    // ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, hackingChance*100, (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.9) {\\r\\n\\t\\t\\tns.print(\\\"weakening \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.75) {\\r\\n\\t\\t\\tns.print(\\\"growing \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"aio.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zer0\",\"moduleSequenceNumber\":3018,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.hack(server)\\r\\n}\",\"filename\":\"single-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":3019,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.grow(server)\\r\\n}\",\"filename\":\"single-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":3020,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.weaken(server)\\r\\n}\",\"filename\":\"single-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":3021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.share()\\r\\n\\t}\\r\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zer0\",\"moduleSequenceNumber\":3022,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//hack\\r\\n//weaken\\r\\n//grow\\r\\n//weaken\\r\\n//establish target\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // ns.tail()\\r\\n    ns.disableLog(\\\"ALL\\\")\\r\\n    ns.print(\\\"---\\\")\\r\\n    var server = ns.args[0]\\r\\n    var targetServer = ns.args[1]\\r\\n    const scriptCost = 1.75\\r\\n    // try {\\r\\n    //     ns.exec(\\\"no-hack.js\\\", \\\"home\\\", 1, targetServer)\\r\\n    // } catch {\\r\\n    //     ns.print(\\\"Maybe it's already running\\\")\\r\\n    // }\\r\\n    // ns.print(targetServer)\\r\\n\\r\\n    //establish timing\\r\\n    const scriptOffset = 20\\r\\n    const batchBuffer = 500\\r\\n    var hackTime= 0\\r\\n    var weakTime= 0\\r\\n    var growTime= 0\\r\\n    var totalTime = 0\\r\\n    var potentialBatches = 0\\r\\n    var batchOffset = 0\\r\\n    var hackOffset = 0\\r\\n    var growOffset = 0\\r\\n    var weakOffset = 0\\r\\n\\r\\n    function establishTiming(){\\r\\n        hackTime= ns.getHackTime(targetServer)\\r\\n        weakTime= ns.getWeakenTime(targetServer)\\r\\n        growTime= ns.getGrowTime(targetServer)\\r\\n        totalTime = weakTime + scriptOffset * 3\\r\\n        potentialBatches = Math.floor(totalTime / ((scriptOffset * 4) + batchBuffer))\\r\\n        batchOffset = totalTime / potentialBatches\\r\\n        // ns.print(\\\"potentialBatches: \\\", potentialBatches)\\r\\n        // ns.print(\\\"batchOffset: \\\", batchOffset)\\r\\n        if (hackTime < growTime && growTime < weakTime) {\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            growOffset = (weakTime - growTime) + scriptOffset\\r\\n            weakOffset = scriptOffset * 2\\r\\n        } else {\\r\\n            ns.print(\\\"Timing doesn't work\\\")\\r\\n        }\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            return [potentialBatches, batchOffset, growOffset, weakOffset]\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n    var serverMoney = 0\\r\\n    var desiredHackAmount = 0\\r\\n    var desiredHackThreads = 0\\r\\n    var hackSecurityIncrease = 0\\r\\n    var weakenChange = 0\\r\\n    var weakenHackThreads = 0\\r\\n    var desiredGrowMultiplier = 0\\r\\n    var desiredGrowThreads = 0\\r\\n    var growSecurityIncrease = 0\\r\\n    var weakenGrowThreads = 0\\r\\n\\r\\n    function establishThreads(hackTarget) {\\r\\n        serverMoney = ns.getServerMoneyAvailable(targetServer)\\r\\n        desiredHackAmount = (serverMoney * hackTarget)\\r\\n        desiredHackThreads = Math.ceil(ns.hackAnalyzeThreads(targetServer, desiredHackAmount))\\r\\n        hackSecurityIncrease = (ns.hackAnalyzeSecurity(desiredHackThreads, targetServer) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenChange = ns.weakenAnalyze(1, 1)\\r\\n        weakenHackThreads = Math.ceil(hackSecurityIncrease / weakenChange)\\r\\n        desiredGrowMultiplier = (serverMoney / (serverMoney - desiredHackAmount))\\r\\n        if (!desiredGrowMultiplier){\\r\\n            desiredGrowMultiplier = 900\\r\\n        } else if (desiredGrowMultiplier < 1) {\\r\\n            desiredGrowMultiplier = 1\\r\\n        }\\r\\n        desiredGrowThreads = Math.ceil(ns.growthAnalyze(targetServer, desiredGrowMultiplier*1.15))\\r\\n        growSecurityIncrease = ((ns.growthAnalyzeSecurity(1, targetServer, 1)*desiredGrowThreads) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenGrowThreads = Math.ceil(growSecurityIncrease*1.15 / weakenChange)\\r\\n        // ns.print(\\\"desiredGrowMultiplier \\\", desiredGrowMultiplier)\\r\\n        // ns.print(\\\"desiredGrowThreads \\\", desiredGrowThreads)\\r\\n        return [desiredHackThreads+1, weakenHackThreads+1, desiredGrowThreads+1, weakenGrowThreads+1];\\r\\n    }\\r\\n\\r\\n    // [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n    [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n    // ns.exec(\\\"single-hack.js\\\", server, 1, targetServer, 0)\\r\\n    // await ns.sleep(hackTime+100)\\r\\n    \\r\\n    var batchCost = 16\\r\\n\\r\\n    while (true) {\\r\\n        // var spaceAvailable = true\\r\\n        var hackTarget = 0.90\\r\\n        // ns.printf(\\\"desiredGrowThreads %s\\\", desiredGrowThreads)\\r\\n        let [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n        for (let i = 1; i < potentialBatches; i++) {\\r\\n            while (batchCost >= 16 && hackTarget > 0.05) {\\r\\n                let [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n                batchCost = (desiredHackThreads + weakenHackThreads + desiredGrowThreads + weakenGrowThreads) * scriptCost;\\r\\n                if ((ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) > batchCost){\\r\\n                    if (serverMoney/ns.getServerMaxMoney(targetServer) <= 0.10) {\\r\\n                        desiredHackThreads  = 1\\r\\n                    }\\r\\n                    ns.print(\\\"+++\\\")\\r\\n                    ns.printf(\\\"Hacking for %s\\\", hackTarget*100)\\r\\n                    // ns.print(\\\"batch \\\", i)\\r\\n                    ns.printf(\\\"hack %s with %s threads from %s\\\", targetServer, desiredHackThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenHackThreads, server)\\r\\n                    ns.printf(\\\"grow %s with %s threads from %s\\\", targetServer, desiredGrowThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenGrowThreads, server)\\r\\n                    ns.exec(\\\"single-hack.js\\\", server, desiredHackThreads, targetServer, hackOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenHackThreads, targetServer, 0, Math.random())\\r\\n                    ns.exec(\\\"single-grow.js\\\", server, desiredGrowThreads, targetServer, growOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenGrowThreads, targetServer, weakOffset, Math.random())\\r\\n                    // spaceAvailable = true\\r\\n                    await ns.sleep(batchOffset)\\r\\n                } else {\\r\\n                    // ns.print(\\\"Not enough ram on \\\", server)\\r\\n                    // ns.print(\\\"batchCost \\\", batchCost)\\r\\n                    // ns.printf(\\\"desiredHackThreads: %s, %s\\\",desiredHackThreads,desiredHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenHackThreads: %s, %s\\\",weakenHackThreads,weakenHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"desiredGrowThreads: %s, %s\\\",desiredGrowThreads,desiredGrowThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenGrowThreads: %s, %s\\\",weakenGrowThreads,weakenGrowThreads*scriptCost)\\r\\n                    // spaceAvailable = false\\r\\n                    hackTarget = hackTarget / 2\\r\\n                    // ns.print(\\\"hackTarget: \\\",hackTarget)\\r\\n                    await ns.sleep(60)\\r\\n                    break\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // ns.printf(\\\"Sleeping for %sms\\\", batchOffset)\\r\\n        await ns.sleep(batchOffset)\\r\\n    }\\r\\n    \\r\\n}\",\"filename\":\"batch-job.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.45,\"server\":\"zer0\",\"moduleSequenceNumber\":3023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"95.6.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",200],\"dataMap\":{\"joesguns\":[0,0,27,0]},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":251.10000000000002,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.8099999999982,\"pid\":1202,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.hack(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":3074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.grow(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///a4f8eb4b-f1b6-4bac-83be-b8a42d77085b\",\"moduleSequenceNumber\":3178}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":3178,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\t// ns.print(ns.args.length);\\r\\n\\twhile(true) {\\r\\n\\t\\tawait ns.weaken(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":3076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, (hackingChance*100).toFixed(2), (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.15) {\\r\\n\\t\\t\\t// ns.print(\\\"weakening \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.60) {\\r\\n\\t\\t\\t// ns.print(\\\"growing \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"oversight.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"nectar-net\",\"moduleSequenceNumber\":3077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    // ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, hackingChance*100, (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.9) {\\r\\n\\t\\t\\tns.print(\\\"weakening \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.75) {\\r\\n\\t\\t\\tns.print(\\\"growing \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"aio.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":3078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.hack(server)\\r\\n}\",\"filename\":\"single-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":3079,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.grow(server)\\r\\n}\",\"filename\":\"single-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":3080,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.weaken(server)\\r\\n}\",\"filename\":\"single-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":3081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.share()\\r\\n\\t}\\r\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":3082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//hack\\r\\n//weaken\\r\\n//grow\\r\\n//weaken\\r\\n//establish target\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // ns.tail()\\r\\n    ns.disableLog(\\\"ALL\\\")\\r\\n    ns.print(\\\"---\\\")\\r\\n    var server = ns.args[0]\\r\\n    var targetServer = ns.args[1]\\r\\n    const scriptCost = 1.75\\r\\n    // try {\\r\\n    //     ns.exec(\\\"no-hack.js\\\", \\\"home\\\", 1, targetServer)\\r\\n    // } catch {\\r\\n    //     ns.print(\\\"Maybe it's already running\\\")\\r\\n    // }\\r\\n    // ns.print(targetServer)\\r\\n\\r\\n    //establish timing\\r\\n    const scriptOffset = 20\\r\\n    const batchBuffer = 500\\r\\n    var hackTime= 0\\r\\n    var weakTime= 0\\r\\n    var growTime= 0\\r\\n    var totalTime = 0\\r\\n    var potentialBatches = 0\\r\\n    var batchOffset = 0\\r\\n    var hackOffset = 0\\r\\n    var growOffset = 0\\r\\n    var weakOffset = 0\\r\\n\\r\\n    function establishTiming(){\\r\\n        hackTime= ns.getHackTime(targetServer)\\r\\n        weakTime= ns.getWeakenTime(targetServer)\\r\\n        growTime= ns.getGrowTime(targetServer)\\r\\n        totalTime = weakTime + scriptOffset * 3\\r\\n        potentialBatches = Math.floor(totalTime / ((scriptOffset * 4) + batchBuffer))\\r\\n        batchOffset = totalTime / potentialBatches\\r\\n        // ns.print(\\\"potentialBatches: \\\", potentialBatches)\\r\\n        // ns.print(\\\"batchOffset: \\\", batchOffset)\\r\\n        if (hackTime < growTime && growTime < weakTime) {\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            growOffset = (weakTime - growTime) + scriptOffset\\r\\n            weakOffset = scriptOffset * 2\\r\\n        } else {\\r\\n            ns.print(\\\"Timing doesn't work\\\")\\r\\n        }\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            return [potentialBatches, batchOffset, growOffset, weakOffset]\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n    var serverMoney = 0\\r\\n    var desiredHackAmount = 0\\r\\n    var desiredHackThreads = 0\\r\\n    var hackSecurityIncrease = 0\\r\\n    var weakenChange = 0\\r\\n    var weakenHackThreads = 0\\r\\n    var desiredGrowMultiplier = 0\\r\\n    var desiredGrowThreads = 0\\r\\n    var growSecurityIncrease = 0\\r\\n    var weakenGrowThreads = 0\\r\\n\\r\\n    function establishThreads(hackTarget) {\\r\\n        serverMoney = ns.getServerMoneyAvailable(targetServer)\\r\\n        desiredHackAmount = (serverMoney * hackTarget)\\r\\n        desiredHackThreads = Math.ceil(ns.hackAnalyzeThreads(targetServer, desiredHackAmount))\\r\\n        hackSecurityIncrease = (ns.hackAnalyzeSecurity(desiredHackThreads, targetServer) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenChange = ns.weakenAnalyze(1, 1)\\r\\n        weakenHackThreads = Math.ceil(hackSecurityIncrease / weakenChange)\\r\\n        desiredGrowMultiplier = (serverMoney / (serverMoney - desiredHackAmount))\\r\\n        if (!desiredGrowMultiplier){\\r\\n            desiredGrowMultiplier = 900\\r\\n        } else if (desiredGrowMultiplier < 1) {\\r\\n            desiredGrowMultiplier = 1\\r\\n        }\\r\\n        desiredGrowThreads = Math.ceil(ns.growthAnalyze(targetServer, desiredGrowMultiplier*1.15))\\r\\n        growSecurityIncrease = ((ns.growthAnalyzeSecurity(1, targetServer, 1)*desiredGrowThreads) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenGrowThreads = Math.ceil(growSecurityIncrease*1.15 / weakenChange)\\r\\n        // ns.print(\\\"desiredGrowMultiplier \\\", desiredGrowMultiplier)\\r\\n        // ns.print(\\\"desiredGrowThreads \\\", desiredGrowThreads)\\r\\n        return [desiredHackThreads+1, weakenHackThreads+1, desiredGrowThreads+1, weakenGrowThreads+1];\\r\\n    }\\r\\n\\r\\n    // [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n    [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n    // ns.exec(\\\"single-hack.js\\\", server, 1, targetServer, 0)\\r\\n    // await ns.sleep(hackTime+100)\\r\\n    \\r\\n    var batchCost = 16\\r\\n\\r\\n    while (true) {\\r\\n        // var spaceAvailable = true\\r\\n        var hackTarget = 0.90\\r\\n        // ns.printf(\\\"desiredGrowThreads %s\\\", desiredGrowThreads)\\r\\n        let [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n        for (let i = 1; i < potentialBatches; i++) {\\r\\n            while (batchCost >= 16 && hackTarget > 0.05) {\\r\\n                let [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n                batchCost = (desiredHackThreads + weakenHackThreads + desiredGrowThreads + weakenGrowThreads) * scriptCost;\\r\\n                if ((ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) > batchCost){\\r\\n                    if (serverMoney/ns.getServerMaxMoney(targetServer) <= 0.10) {\\r\\n                        desiredHackThreads  = 1\\r\\n                    }\\r\\n                    ns.print(\\\"+++\\\")\\r\\n                    ns.printf(\\\"Hacking for %s\\\", hackTarget*100)\\r\\n                    // ns.print(\\\"batch \\\", i)\\r\\n                    ns.printf(\\\"hack %s with %s threads from %s\\\", targetServer, desiredHackThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenHackThreads, server)\\r\\n                    ns.printf(\\\"grow %s with %s threads from %s\\\", targetServer, desiredGrowThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenGrowThreads, server)\\r\\n                    ns.exec(\\\"single-hack.js\\\", server, desiredHackThreads, targetServer, hackOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenHackThreads, targetServer, 0, Math.random())\\r\\n                    ns.exec(\\\"single-grow.js\\\", server, desiredGrowThreads, targetServer, growOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenGrowThreads, targetServer, weakOffset, Math.random())\\r\\n                    // spaceAvailable = true\\r\\n                    await ns.sleep(batchOffset)\\r\\n                } else {\\r\\n                    // ns.print(\\\"Not enough ram on \\\", server)\\r\\n                    // ns.print(\\\"batchCost \\\", batchCost)\\r\\n                    // ns.printf(\\\"desiredHackThreads: %s, %s\\\",desiredHackThreads,desiredHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenHackThreads: %s, %s\\\",weakenHackThreads,weakenHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"desiredGrowThreads: %s, %s\\\",desiredGrowThreads,desiredGrowThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenGrowThreads: %s, %s\\\",weakenGrowThreads,weakenGrowThreads*scriptCost)\\r\\n                    // spaceAvailable = false\\r\\n                    hackTarget = hackTarget / 2\\r\\n                    // ns.print(\\\"hackTarget: \\\",hackTarget)\\r\\n                    await ns.sleep(60)\\r\\n                    break\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // ns.printf(\\\"Sleeping for %sms\\\", batchOffset)\\r\\n        await ns.sleep(batchOffset)\\r\\n    }\\r\\n    \\r\\n}\",\"filename\":\"batch-job.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.45,\"server\":\"nectar-net\",\"moduleSequenceNumber\":3083,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"74.4.5.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",200],\"dataMap\":{\"joesguns\":[0,0,54,0]},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":502.20000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.8099999999982,\"pid\":1203,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.hack(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":3094,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.grow(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///c36fb9de-3cb0-4504-9060-0582546af727\",\"moduleSequenceNumber\":3179}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":3179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\t// ns.print(ns.args.length);\\r\\n\\twhile(true) {\\r\\n\\t\\tawait ns.weaken(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":3096,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, (hackingChance*100).toFixed(2), (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.15) {\\r\\n\\t\\t\\t// ns.print(\\\"weakening \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.60) {\\r\\n\\t\\t\\t// ns.print(\\\"growing \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"oversight.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"neo-net\",\"moduleSequenceNumber\":3097,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    // ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, hackingChance*100, (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.9) {\\r\\n\\t\\t\\tns.print(\\\"weakening \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.75) {\\r\\n\\t\\t\\tns.print(\\\"growing \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"aio.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"neo-net\",\"moduleSequenceNumber\":3098,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.hack(server)\\r\\n}\",\"filename\":\"single-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":3099,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.grow(server)\\r\\n}\",\"filename\":\"single-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":3100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.weaken(server)\\r\\n}\",\"filename\":\"single-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":3101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.share()\\r\\n\\t}\\r\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"neo-net\",\"moduleSequenceNumber\":3102,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//hack\\r\\n//weaken\\r\\n//grow\\r\\n//weaken\\r\\n//establish target\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // ns.tail()\\r\\n    ns.disableLog(\\\"ALL\\\")\\r\\n    ns.print(\\\"---\\\")\\r\\n    var server = ns.args[0]\\r\\n    var targetServer = ns.args[1]\\r\\n    const scriptCost = 1.75\\r\\n    // try {\\r\\n    //     ns.exec(\\\"no-hack.js\\\", \\\"home\\\", 1, targetServer)\\r\\n    // } catch {\\r\\n    //     ns.print(\\\"Maybe it's already running\\\")\\r\\n    // }\\r\\n    // ns.print(targetServer)\\r\\n\\r\\n    //establish timing\\r\\n    const scriptOffset = 20\\r\\n    const batchBuffer = 500\\r\\n    var hackTime= 0\\r\\n    var weakTime= 0\\r\\n    var growTime= 0\\r\\n    var totalTime = 0\\r\\n    var potentialBatches = 0\\r\\n    var batchOffset = 0\\r\\n    var hackOffset = 0\\r\\n    var growOffset = 0\\r\\n    var weakOffset = 0\\r\\n\\r\\n    function establishTiming(){\\r\\n        hackTime= ns.getHackTime(targetServer)\\r\\n        weakTime= ns.getWeakenTime(targetServer)\\r\\n        growTime= ns.getGrowTime(targetServer)\\r\\n        totalTime = weakTime + scriptOffset * 3\\r\\n        potentialBatches = Math.floor(totalTime / ((scriptOffset * 4) + batchBuffer))\\r\\n        batchOffset = totalTime / potentialBatches\\r\\n        // ns.print(\\\"potentialBatches: \\\", potentialBatches)\\r\\n        // ns.print(\\\"batchOffset: \\\", batchOffset)\\r\\n        if (hackTime < growTime && growTime < weakTime) {\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            growOffset = (weakTime - growTime) + scriptOffset\\r\\n            weakOffset = scriptOffset * 2\\r\\n        } else {\\r\\n            ns.print(\\\"Timing doesn't work\\\")\\r\\n        }\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            return [potentialBatches, batchOffset, growOffset, weakOffset]\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n    var serverMoney = 0\\r\\n    var desiredHackAmount = 0\\r\\n    var desiredHackThreads = 0\\r\\n    var hackSecurityIncrease = 0\\r\\n    var weakenChange = 0\\r\\n    var weakenHackThreads = 0\\r\\n    var desiredGrowMultiplier = 0\\r\\n    var desiredGrowThreads = 0\\r\\n    var growSecurityIncrease = 0\\r\\n    var weakenGrowThreads = 0\\r\\n\\r\\n    function establishThreads(hackTarget) {\\r\\n        serverMoney = ns.getServerMoneyAvailable(targetServer)\\r\\n        desiredHackAmount = (serverMoney * hackTarget)\\r\\n        desiredHackThreads = Math.ceil(ns.hackAnalyzeThreads(targetServer, desiredHackAmount))\\r\\n        hackSecurityIncrease = (ns.hackAnalyzeSecurity(desiredHackThreads, targetServer) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenChange = ns.weakenAnalyze(1, 1)\\r\\n        weakenHackThreads = Math.ceil(hackSecurityIncrease / weakenChange)\\r\\n        desiredGrowMultiplier = (serverMoney / (serverMoney - desiredHackAmount))\\r\\n        if (!desiredGrowMultiplier){\\r\\n            desiredGrowMultiplier = 900\\r\\n        } else if (desiredGrowMultiplier < 1) {\\r\\n            desiredGrowMultiplier = 1\\r\\n        }\\r\\n        desiredGrowThreads = Math.ceil(ns.growthAnalyze(targetServer, desiredGrowMultiplier*1.15))\\r\\n        growSecurityIncrease = ((ns.growthAnalyzeSecurity(1, targetServer, 1)*desiredGrowThreads) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenGrowThreads = Math.ceil(growSecurityIncrease*1.15 / weakenChange)\\r\\n        // ns.print(\\\"desiredGrowMultiplier \\\", desiredGrowMultiplier)\\r\\n        // ns.print(\\\"desiredGrowThreads \\\", desiredGrowThreads)\\r\\n        return [desiredHackThreads+1, weakenHackThreads+1, desiredGrowThreads+1, weakenGrowThreads+1];\\r\\n    }\\r\\n\\r\\n    // [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n    [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n    // ns.exec(\\\"single-hack.js\\\", server, 1, targetServer, 0)\\r\\n    // await ns.sleep(hackTime+100)\\r\\n    \\r\\n    var batchCost = 16\\r\\n\\r\\n    while (true) {\\r\\n        // var spaceAvailable = true\\r\\n        var hackTarget = 0.90\\r\\n        // ns.printf(\\\"desiredGrowThreads %s\\\", desiredGrowThreads)\\r\\n        let [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n        for (let i = 1; i < potentialBatches; i++) {\\r\\n            while (batchCost >= 16 && hackTarget > 0.05) {\\r\\n                let [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n                batchCost = (desiredHackThreads + weakenHackThreads + desiredGrowThreads + weakenGrowThreads) * scriptCost;\\r\\n                if ((ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) > batchCost){\\r\\n                    if (serverMoney/ns.getServerMaxMoney(targetServer) <= 0.10) {\\r\\n                        desiredHackThreads  = 1\\r\\n                    }\\r\\n                    ns.print(\\\"+++\\\")\\r\\n                    ns.printf(\\\"Hacking for %s\\\", hackTarget*100)\\r\\n                    // ns.print(\\\"batch \\\", i)\\r\\n                    ns.printf(\\\"hack %s with %s threads from %s\\\", targetServer, desiredHackThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenHackThreads, server)\\r\\n                    ns.printf(\\\"grow %s with %s threads from %s\\\", targetServer, desiredGrowThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenGrowThreads, server)\\r\\n                    ns.exec(\\\"single-hack.js\\\", server, desiredHackThreads, targetServer, hackOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenHackThreads, targetServer, 0, Math.random())\\r\\n                    ns.exec(\\\"single-grow.js\\\", server, desiredGrowThreads, targetServer, growOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenGrowThreads, targetServer, weakOffset, Math.random())\\r\\n                    // spaceAvailable = true\\r\\n                    await ns.sleep(batchOffset)\\r\\n                } else {\\r\\n                    // ns.print(\\\"Not enough ram on \\\", server)\\r\\n                    // ns.print(\\\"batchCost \\\", batchCost)\\r\\n                    // ns.printf(\\\"desiredHackThreads: %s, %s\\\",desiredHackThreads,desiredHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenHackThreads: %s, %s\\\",weakenHackThreads,weakenHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"desiredGrowThreads: %s, %s\\\",desiredGrowThreads,desiredGrowThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenGrowThreads: %s, %s\\\",weakenGrowThreads,weakenGrowThreads*scriptCost)\\r\\n                    // spaceAvailable = false\\r\\n                    hackTarget = hackTarget / 2\\r\\n                    // ns.print(\\\"hackTarget: \\\",hackTarget)\\r\\n                    await ns.sleep(60)\\r\\n                    break\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // ns.printf(\\\"Sleeping for %sms\\\", batchOffset)\\r\\n        await ns.sleep(batchOffset)\\r\\n    }\\r\\n    \\r\\n}\",\"filename\":\"batch-job.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.45,\"server\":\"neo-net\",\"moduleSequenceNumber\":3103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"65.1.3.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",200],\"dataMap\":{\"joesguns\":[0,0,108,0]},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1004.4000000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.8099999999982,\"pid\":1195,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":36,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.hack(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":2934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.grow(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1a1952c0-98c1-4626-9e7e-782a4944861d\",\"moduleSequenceNumber\":3171}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":3171,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\t// ns.print(ns.args.length);\\r\\n\\twhile(true) {\\r\\n\\t\\tawait ns.weaken(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":2936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, (hackingChance*100).toFixed(2), (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.15) {\\r\\n\\t\\t\\t// ns.print(\\\"weakening \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.60) {\\r\\n\\t\\t\\t// ns.print(\\\"growing \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"oversight.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"silver-helix\",\"moduleSequenceNumber\":2937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    // ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, hackingChance*100, (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.9) {\\r\\n\\t\\t\\tns.print(\\\"weakening \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.75) {\\r\\n\\t\\t\\tns.print(\\\"growing \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"aio.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"silver-helix\",\"moduleSequenceNumber\":2938,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.hack(server)\\r\\n}\",\"filename\":\"single-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":2939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.grow(server)\\r\\n}\",\"filename\":\"single-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":2940,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.weaken(server)\\r\\n}\",\"filename\":\"single-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":2941,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.share()\\r\\n\\t}\\r\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":2942,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//hack\\r\\n//weaken\\r\\n//grow\\r\\n//weaken\\r\\n//establish target\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // ns.tail()\\r\\n    ns.disableLog(\\\"ALL\\\")\\r\\n    ns.print(\\\"---\\\")\\r\\n    var server = ns.args[0]\\r\\n    var targetServer = ns.args[1]\\r\\n    const scriptCost = 1.75\\r\\n    // try {\\r\\n    //     ns.exec(\\\"no-hack.js\\\", \\\"home\\\", 1, targetServer)\\r\\n    // } catch {\\r\\n    //     ns.print(\\\"Maybe it's already running\\\")\\r\\n    // }\\r\\n    // ns.print(targetServer)\\r\\n\\r\\n    //establish timing\\r\\n    const scriptOffset = 20\\r\\n    const batchBuffer = 500\\r\\n    var hackTime= 0\\r\\n    var weakTime= 0\\r\\n    var growTime= 0\\r\\n    var totalTime = 0\\r\\n    var potentialBatches = 0\\r\\n    var batchOffset = 0\\r\\n    var hackOffset = 0\\r\\n    var growOffset = 0\\r\\n    var weakOffset = 0\\r\\n\\r\\n    function establishTiming(){\\r\\n        hackTime= ns.getHackTime(targetServer)\\r\\n        weakTime= ns.getWeakenTime(targetServer)\\r\\n        growTime= ns.getGrowTime(targetServer)\\r\\n        totalTime = weakTime + scriptOffset * 3\\r\\n        potentialBatches = Math.floor(totalTime / ((scriptOffset * 4) + batchBuffer))\\r\\n        batchOffset = totalTime / potentialBatches\\r\\n        // ns.print(\\\"potentialBatches: \\\", potentialBatches)\\r\\n        // ns.print(\\\"batchOffset: \\\", batchOffset)\\r\\n        if (hackTime < growTime && growTime < weakTime) {\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            growOffset = (weakTime - growTime) + scriptOffset\\r\\n            weakOffset = scriptOffset * 2\\r\\n        } else {\\r\\n            ns.print(\\\"Timing doesn't work\\\")\\r\\n        }\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            return [potentialBatches, batchOffset, growOffset, weakOffset]\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n    var serverMoney = 0\\r\\n    var desiredHackAmount = 0\\r\\n    var desiredHackThreads = 0\\r\\n    var hackSecurityIncrease = 0\\r\\n    var weakenChange = 0\\r\\n    var weakenHackThreads = 0\\r\\n    var desiredGrowMultiplier = 0\\r\\n    var desiredGrowThreads = 0\\r\\n    var growSecurityIncrease = 0\\r\\n    var weakenGrowThreads = 0\\r\\n\\r\\n    function establishThreads(hackTarget) {\\r\\n        serverMoney = ns.getServerMoneyAvailable(targetServer)\\r\\n        desiredHackAmount = (serverMoney * hackTarget)\\r\\n        desiredHackThreads = Math.ceil(ns.hackAnalyzeThreads(targetServer, desiredHackAmount))\\r\\n        hackSecurityIncrease = (ns.hackAnalyzeSecurity(desiredHackThreads, targetServer) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenChange = ns.weakenAnalyze(1, 1)\\r\\n        weakenHackThreads = Math.ceil(hackSecurityIncrease / weakenChange)\\r\\n        desiredGrowMultiplier = (serverMoney / (serverMoney - desiredHackAmount))\\r\\n        if (!desiredGrowMultiplier){\\r\\n            desiredGrowMultiplier = 900\\r\\n        } else if (desiredGrowMultiplier < 1) {\\r\\n            desiredGrowMultiplier = 1\\r\\n        }\\r\\n        desiredGrowThreads = Math.ceil(ns.growthAnalyze(targetServer, desiredGrowMultiplier*1.15))\\r\\n        growSecurityIncrease = ((ns.growthAnalyzeSecurity(1, targetServer, 1)*desiredGrowThreads) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenGrowThreads = Math.ceil(growSecurityIncrease*1.15 / weakenChange)\\r\\n        // ns.print(\\\"desiredGrowMultiplier \\\", desiredGrowMultiplier)\\r\\n        // ns.print(\\\"desiredGrowThreads \\\", desiredGrowThreads)\\r\\n        return [desiredHackThreads+1, weakenHackThreads+1, desiredGrowThreads+1, weakenGrowThreads+1];\\r\\n    }\\r\\n\\r\\n    // [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n    [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n    // ns.exec(\\\"single-hack.js\\\", server, 1, targetServer, 0)\\r\\n    // await ns.sleep(hackTime+100)\\r\\n    \\r\\n    var batchCost = 16\\r\\n\\r\\n    while (true) {\\r\\n        // var spaceAvailable = true\\r\\n        var hackTarget = 0.90\\r\\n        // ns.printf(\\\"desiredGrowThreads %s\\\", desiredGrowThreads)\\r\\n        let [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n        for (let i = 1; i < potentialBatches; i++) {\\r\\n            while (batchCost >= 16 && hackTarget > 0.05) {\\r\\n                let [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n                batchCost = (desiredHackThreads + weakenHackThreads + desiredGrowThreads + weakenGrowThreads) * scriptCost;\\r\\n                if ((ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) > batchCost){\\r\\n                    if (serverMoney/ns.getServerMaxMoney(targetServer) <= 0.10) {\\r\\n                        desiredHackThreads  = 1\\r\\n                    }\\r\\n                    ns.print(\\\"+++\\\")\\r\\n                    ns.printf(\\\"Hacking for %s\\\", hackTarget*100)\\r\\n                    // ns.print(\\\"batch \\\", i)\\r\\n                    ns.printf(\\\"hack %s with %s threads from %s\\\", targetServer, desiredHackThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenHackThreads, server)\\r\\n                    ns.printf(\\\"grow %s with %s threads from %s\\\", targetServer, desiredGrowThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenGrowThreads, server)\\r\\n                    ns.exec(\\\"single-hack.js\\\", server, desiredHackThreads, targetServer, hackOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenHackThreads, targetServer, 0, Math.random())\\r\\n                    ns.exec(\\\"single-grow.js\\\", server, desiredGrowThreads, targetServer, growOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenGrowThreads, targetServer, weakOffset, Math.random())\\r\\n                    // spaceAvailable = true\\r\\n                    await ns.sleep(batchOffset)\\r\\n                } else {\\r\\n                    // ns.print(\\\"Not enough ram on \\\", server)\\r\\n                    // ns.print(\\\"batchCost \\\", batchCost)\\r\\n                    // ns.printf(\\\"desiredHackThreads: %s, %s\\\",desiredHackThreads,desiredHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenHackThreads: %s, %s\\\",weakenHackThreads,weakenHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"desiredGrowThreads: %s, %s\\\",desiredGrowThreads,desiredGrowThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenGrowThreads: %s, %s\\\",weakenGrowThreads,weakenGrowThreads*scriptCost)\\r\\n                    // spaceAvailable = false\\r\\n                    hackTarget = hackTarget / 2\\r\\n                    // ns.print(\\\"hackTarget: \\\",hackTarget)\\r\\n                    await ns.sleep(60)\\r\\n                    break\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // ns.printf(\\\"Sleeping for %sms\\\", batchOffset)\\r\\n        await ns.sleep(batchOffset)\\r\\n    }\\r\\n    \\r\\n}\",\"filename\":\"batch-job.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.45,\"server\":\"silver-helix\",\"moduleSequenceNumber\":2943,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"max-hardware\",\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"32.6.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",200],\"dataMap\":{\"joesguns\":[0,0,27,0]},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":251.10000000000002,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.8099999999982,\"pid\":1200,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.hack(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":3034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.grow(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///b234440a-88df-4935-8338-2d02bb1cf767\",\"moduleSequenceNumber\":3176}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":3176,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\t// ns.print(ns.args.length);\\r\\n\\twhile(true) {\\r\\n\\t\\tawait ns.weaken(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":3036,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, (hackingChance*100).toFixed(2), (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.15) {\\r\\n\\t\\t\\t// ns.print(\\\"weakening \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.60) {\\r\\n\\t\\t\\t// ns.print(\\\"growing \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"oversight.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":3037,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    // ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, hackingChance*100, (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.9) {\\r\\n\\t\\t\\tns.print(\\\"weakening \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.75) {\\r\\n\\t\\t\\tns.print(\\\"growing \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"aio.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":3038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.hack(server)\\r\\n}\",\"filename\":\"single-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":3039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.grow(server)\\r\\n}\",\"filename\":\"single-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":3040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.weaken(server)\\r\\n}\",\"filename\":\"single-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":3041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.share()\\r\\n\\t}\\r\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":3042,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//hack\\r\\n//weaken\\r\\n//grow\\r\\n//weaken\\r\\n//establish target\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // ns.tail()\\r\\n    ns.disableLog(\\\"ALL\\\")\\r\\n    ns.print(\\\"---\\\")\\r\\n    var server = ns.args[0]\\r\\n    var targetServer = ns.args[1]\\r\\n    const scriptCost = 1.75\\r\\n    // try {\\r\\n    //     ns.exec(\\\"no-hack.js\\\", \\\"home\\\", 1, targetServer)\\r\\n    // } catch {\\r\\n    //     ns.print(\\\"Maybe it's already running\\\")\\r\\n    // }\\r\\n    // ns.print(targetServer)\\r\\n\\r\\n    //establish timing\\r\\n    const scriptOffset = 20\\r\\n    const batchBuffer = 500\\r\\n    var hackTime= 0\\r\\n    var weakTime= 0\\r\\n    var growTime= 0\\r\\n    var totalTime = 0\\r\\n    var potentialBatches = 0\\r\\n    var batchOffset = 0\\r\\n    var hackOffset = 0\\r\\n    var growOffset = 0\\r\\n    var weakOffset = 0\\r\\n\\r\\n    function establishTiming(){\\r\\n        hackTime= ns.getHackTime(targetServer)\\r\\n        weakTime= ns.getWeakenTime(targetServer)\\r\\n        growTime= ns.getGrowTime(targetServer)\\r\\n        totalTime = weakTime + scriptOffset * 3\\r\\n        potentialBatches = Math.floor(totalTime / ((scriptOffset * 4) + batchBuffer))\\r\\n        batchOffset = totalTime / potentialBatches\\r\\n        // ns.print(\\\"potentialBatches: \\\", potentialBatches)\\r\\n        // ns.print(\\\"batchOffset: \\\", batchOffset)\\r\\n        if (hackTime < growTime && growTime < weakTime) {\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            growOffset = (weakTime - growTime) + scriptOffset\\r\\n            weakOffset = scriptOffset * 2\\r\\n        } else {\\r\\n            ns.print(\\\"Timing doesn't work\\\")\\r\\n        }\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            return [potentialBatches, batchOffset, growOffset, weakOffset]\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n    var serverMoney = 0\\r\\n    var desiredHackAmount = 0\\r\\n    var desiredHackThreads = 0\\r\\n    var hackSecurityIncrease = 0\\r\\n    var weakenChange = 0\\r\\n    var weakenHackThreads = 0\\r\\n    var desiredGrowMultiplier = 0\\r\\n    var desiredGrowThreads = 0\\r\\n    var growSecurityIncrease = 0\\r\\n    var weakenGrowThreads = 0\\r\\n\\r\\n    function establishThreads(hackTarget) {\\r\\n        serverMoney = ns.getServerMoneyAvailable(targetServer)\\r\\n        desiredHackAmount = (serverMoney * hackTarget)\\r\\n        desiredHackThreads = Math.ceil(ns.hackAnalyzeThreads(targetServer, desiredHackAmount))\\r\\n        hackSecurityIncrease = (ns.hackAnalyzeSecurity(desiredHackThreads, targetServer) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenChange = ns.weakenAnalyze(1, 1)\\r\\n        weakenHackThreads = Math.ceil(hackSecurityIncrease / weakenChange)\\r\\n        desiredGrowMultiplier = (serverMoney / (serverMoney - desiredHackAmount))\\r\\n        if (!desiredGrowMultiplier){\\r\\n            desiredGrowMultiplier = 900\\r\\n        } else if (desiredGrowMultiplier < 1) {\\r\\n            desiredGrowMultiplier = 1\\r\\n        }\\r\\n        desiredGrowThreads = Math.ceil(ns.growthAnalyze(targetServer, desiredGrowMultiplier*1.15))\\r\\n        growSecurityIncrease = ((ns.growthAnalyzeSecurity(1, targetServer, 1)*desiredGrowThreads) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenGrowThreads = Math.ceil(growSecurityIncrease*1.15 / weakenChange)\\r\\n        // ns.print(\\\"desiredGrowMultiplier \\\", desiredGrowMultiplier)\\r\\n        // ns.print(\\\"desiredGrowThreads \\\", desiredGrowThreads)\\r\\n        return [desiredHackThreads+1, weakenHackThreads+1, desiredGrowThreads+1, weakenGrowThreads+1];\\r\\n    }\\r\\n\\r\\n    // [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n    [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n    // ns.exec(\\\"single-hack.js\\\", server, 1, targetServer, 0)\\r\\n    // await ns.sleep(hackTime+100)\\r\\n    \\r\\n    var batchCost = 16\\r\\n\\r\\n    while (true) {\\r\\n        // var spaceAvailable = true\\r\\n        var hackTarget = 0.90\\r\\n        // ns.printf(\\\"desiredGrowThreads %s\\\", desiredGrowThreads)\\r\\n        let [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n        for (let i = 1; i < potentialBatches; i++) {\\r\\n            while (batchCost >= 16 && hackTarget > 0.05) {\\r\\n                let [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n                batchCost = (desiredHackThreads + weakenHackThreads + desiredGrowThreads + weakenGrowThreads) * scriptCost;\\r\\n                if ((ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) > batchCost){\\r\\n                    if (serverMoney/ns.getServerMaxMoney(targetServer) <= 0.10) {\\r\\n                        desiredHackThreads  = 1\\r\\n                    }\\r\\n                    ns.print(\\\"+++\\\")\\r\\n                    ns.printf(\\\"Hacking for %s\\\", hackTarget*100)\\r\\n                    // ns.print(\\\"batch \\\", i)\\r\\n                    ns.printf(\\\"hack %s with %s threads from %s\\\", targetServer, desiredHackThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenHackThreads, server)\\r\\n                    ns.printf(\\\"grow %s with %s threads from %s\\\", targetServer, desiredGrowThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenGrowThreads, server)\\r\\n                    ns.exec(\\\"single-hack.js\\\", server, desiredHackThreads, targetServer, hackOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenHackThreads, targetServer, 0, Math.random())\\r\\n                    ns.exec(\\\"single-grow.js\\\", server, desiredGrowThreads, targetServer, growOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenGrowThreads, targetServer, weakOffset, Math.random())\\r\\n                    // spaceAvailable = true\\r\\n                    await ns.sleep(batchOffset)\\r\\n                } else {\\r\\n                    // ns.print(\\\"Not enough ram on \\\", server)\\r\\n                    // ns.print(\\\"batchCost \\\", batchCost)\\r\\n                    // ns.printf(\\\"desiredHackThreads: %s, %s\\\",desiredHackThreads,desiredHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenHackThreads: %s, %s\\\",weakenHackThreads,weakenHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"desiredGrowThreads: %s, %s\\\",desiredGrowThreads,desiredGrowThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenGrowThreads: %s, %s\\\",weakenGrowThreads,weakenGrowThreads*scriptCost)\\r\\n                    // spaceAvailable = false\\r\\n                    hackTarget = hackTarget / 2\\r\\n                    // ns.print(\\\"hackTarget: \\\",hackTarget)\\r\\n                    await ns.sleep(60)\\r\\n                    break\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // ns.printf(\\\"Sleeping for %sms\\\", batchOffset)\\r\\n        await ns.sleep(batchOffset)\\r\\n    }\\r\\n    \\r\\n}\",\"filename\":\"batch-job.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.45,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":3043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"89.6.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",200],\"dataMap\":{\"joesguns\":[0,0,27,0]},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":251.10000000000002,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.8099999999982,\"pid\":1201,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.hack(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":3054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.grow(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2aafe0e2-da17-4607-8e93-1177204087e2\",\"moduleSequenceNumber\":3177}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":3177,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\t// ns.print(ns.args.length);\\r\\n\\twhile(true) {\\r\\n\\t\\tawait ns.weaken(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":3056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, (hackingChance*100).toFixed(2), (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.15) {\\r\\n\\t\\t\\t// ns.print(\\\"weakening \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.60) {\\r\\n\\t\\t\\t// ns.print(\\\"growing \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"oversight.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":3057,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    // ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, hackingChance*100, (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.9) {\\r\\n\\t\\t\\tns.print(\\\"weakening \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.75) {\\r\\n\\t\\t\\tns.print(\\\"growing \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"aio.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":3058,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.hack(server)\\r\\n}\",\"filename\":\"single-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":3059,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.grow(server)\\r\\n}\",\"filename\":\"single-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":3060,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.weaken(server)\\r\\n}\",\"filename\":\"single-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":3061,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.share()\\r\\n\\t}\\r\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":3062,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//hack\\r\\n//weaken\\r\\n//grow\\r\\n//weaken\\r\\n//establish target\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // ns.tail()\\r\\n    ns.disableLog(\\\"ALL\\\")\\r\\n    ns.print(\\\"---\\\")\\r\\n    var server = ns.args[0]\\r\\n    var targetServer = ns.args[1]\\r\\n    const scriptCost = 1.75\\r\\n    // try {\\r\\n    //     ns.exec(\\\"no-hack.js\\\", \\\"home\\\", 1, targetServer)\\r\\n    // } catch {\\r\\n    //     ns.print(\\\"Maybe it's already running\\\")\\r\\n    // }\\r\\n    // ns.print(targetServer)\\r\\n\\r\\n    //establish timing\\r\\n    const scriptOffset = 20\\r\\n    const batchBuffer = 500\\r\\n    var hackTime= 0\\r\\n    var weakTime= 0\\r\\n    var growTime= 0\\r\\n    var totalTime = 0\\r\\n    var potentialBatches = 0\\r\\n    var batchOffset = 0\\r\\n    var hackOffset = 0\\r\\n    var growOffset = 0\\r\\n    var weakOffset = 0\\r\\n\\r\\n    function establishTiming(){\\r\\n        hackTime= ns.getHackTime(targetServer)\\r\\n        weakTime= ns.getWeakenTime(targetServer)\\r\\n        growTime= ns.getGrowTime(targetServer)\\r\\n        totalTime = weakTime + scriptOffset * 3\\r\\n        potentialBatches = Math.floor(totalTime / ((scriptOffset * 4) + batchBuffer))\\r\\n        batchOffset = totalTime / potentialBatches\\r\\n        // ns.print(\\\"potentialBatches: \\\", potentialBatches)\\r\\n        // ns.print(\\\"batchOffset: \\\", batchOffset)\\r\\n        if (hackTime < growTime && growTime < weakTime) {\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            growOffset = (weakTime - growTime) + scriptOffset\\r\\n            weakOffset = scriptOffset * 2\\r\\n        } else {\\r\\n            ns.print(\\\"Timing doesn't work\\\")\\r\\n        }\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            return [potentialBatches, batchOffset, growOffset, weakOffset]\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n    var serverMoney = 0\\r\\n    var desiredHackAmount = 0\\r\\n    var desiredHackThreads = 0\\r\\n    var hackSecurityIncrease = 0\\r\\n    var weakenChange = 0\\r\\n    var weakenHackThreads = 0\\r\\n    var desiredGrowMultiplier = 0\\r\\n    var desiredGrowThreads = 0\\r\\n    var growSecurityIncrease = 0\\r\\n    var weakenGrowThreads = 0\\r\\n\\r\\n    function establishThreads(hackTarget) {\\r\\n        serverMoney = ns.getServerMoneyAvailable(targetServer)\\r\\n        desiredHackAmount = (serverMoney * hackTarget)\\r\\n        desiredHackThreads = Math.ceil(ns.hackAnalyzeThreads(targetServer, desiredHackAmount))\\r\\n        hackSecurityIncrease = (ns.hackAnalyzeSecurity(desiredHackThreads, targetServer) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenChange = ns.weakenAnalyze(1, 1)\\r\\n        weakenHackThreads = Math.ceil(hackSecurityIncrease / weakenChange)\\r\\n        desiredGrowMultiplier = (serverMoney / (serverMoney - desiredHackAmount))\\r\\n        if (!desiredGrowMultiplier){\\r\\n            desiredGrowMultiplier = 900\\r\\n        } else if (desiredGrowMultiplier < 1) {\\r\\n            desiredGrowMultiplier = 1\\r\\n        }\\r\\n        desiredGrowThreads = Math.ceil(ns.growthAnalyze(targetServer, desiredGrowMultiplier*1.15))\\r\\n        growSecurityIncrease = ((ns.growthAnalyzeSecurity(1, targetServer, 1)*desiredGrowThreads) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenGrowThreads = Math.ceil(growSecurityIncrease*1.15 / weakenChange)\\r\\n        // ns.print(\\\"desiredGrowMultiplier \\\", desiredGrowMultiplier)\\r\\n        // ns.print(\\\"desiredGrowThreads \\\", desiredGrowThreads)\\r\\n        return [desiredHackThreads+1, weakenHackThreads+1, desiredGrowThreads+1, weakenGrowThreads+1];\\r\\n    }\\r\\n\\r\\n    // [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n    [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n    // ns.exec(\\\"single-hack.js\\\", server, 1, targetServer, 0)\\r\\n    // await ns.sleep(hackTime+100)\\r\\n    \\r\\n    var batchCost = 16\\r\\n\\r\\n    while (true) {\\r\\n        // var spaceAvailable = true\\r\\n        var hackTarget = 0.90\\r\\n        // ns.printf(\\\"desiredGrowThreads %s\\\", desiredGrowThreads)\\r\\n        let [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n        for (let i = 1; i < potentialBatches; i++) {\\r\\n            while (batchCost >= 16 && hackTarget > 0.05) {\\r\\n                let [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n                batchCost = (desiredHackThreads + weakenHackThreads + desiredGrowThreads + weakenGrowThreads) * scriptCost;\\r\\n                if ((ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) > batchCost){\\r\\n                    if (serverMoney/ns.getServerMaxMoney(targetServer) <= 0.10) {\\r\\n                        desiredHackThreads  = 1\\r\\n                    }\\r\\n                    ns.print(\\\"+++\\\")\\r\\n                    ns.printf(\\\"Hacking for %s\\\", hackTarget*100)\\r\\n                    // ns.print(\\\"batch \\\", i)\\r\\n                    ns.printf(\\\"hack %s with %s threads from %s\\\", targetServer, desiredHackThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenHackThreads, server)\\r\\n                    ns.printf(\\\"grow %s with %s threads from %s\\\", targetServer, desiredGrowThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenGrowThreads, server)\\r\\n                    ns.exec(\\\"single-hack.js\\\", server, desiredHackThreads, targetServer, hackOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenHackThreads, targetServer, 0, Math.random())\\r\\n                    ns.exec(\\\"single-grow.js\\\", server, desiredGrowThreads, targetServer, growOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenGrowThreads, targetServer, weakOffset, Math.random())\\r\\n                    // spaceAvailable = true\\r\\n                    await ns.sleep(batchOffset)\\r\\n                } else {\\r\\n                    // ns.print(\\\"Not enough ram on \\\", server)\\r\\n                    // ns.print(\\\"batchCost \\\", batchCost)\\r\\n                    // ns.printf(\\\"desiredHackThreads: %s, %s\\\",desiredHackThreads,desiredHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenHackThreads: %s, %s\\\",weakenHackThreads,weakenHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"desiredGrowThreads: %s, %s\\\",desiredGrowThreads,desiredGrowThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenGrowThreads: %s, %s\\\",weakenGrowThreads,weakenGrowThreads*scriptCost)\\r\\n                    // spaceAvailable = false\\r\\n                    hackTarget = hackTarget / 2\\r\\n                    // ns.print(\\\"hackTarget: \\\",hackTarget)\\r\\n                    await ns.sleep(60)\\r\\n                    break\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // ns.printf(\\\"Sleeping for %sms\\\", batchOffset)\\r\\n        await ns.sleep(batchOffset)\\r\\n    }\\r\\n    \\r\\n}\",\"filename\":\"batch-job.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.45,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":3063,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-698768-FoodNStuff.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":3758124036585930,\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"81.9.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",200],\"dataMap\":{\"joesguns\":[0,0,54,0]},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":502.20000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.8099999999982,\"pid\":1196,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.hack(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":2954,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.grow(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///a83c662d-bbba-414e-8687-efcb7868a1ff\",\"moduleSequenceNumber\":3172}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":3172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\t// ns.print(ns.args.length);\\r\\n\\twhile(true) {\\r\\n\\t\\tawait ns.weaken(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":2956,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, (hackingChance*100).toFixed(2), (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.15) {\\r\\n\\t\\t\\t// ns.print(\\\"weakening \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.60) {\\r\\n\\t\\t\\t// ns.print(\\\"growing \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"oversight.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"phantasy\",\"moduleSequenceNumber\":2957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    // ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, hackingChance*100, (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.9) {\\r\\n\\t\\t\\tns.print(\\\"weakening \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.75) {\\r\\n\\t\\t\\tns.print(\\\"growing \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"aio.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"phantasy\",\"moduleSequenceNumber\":2958,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.hack(server)\\r\\n}\",\"filename\":\"single-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":2959,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.grow(server)\\r\\n}\",\"filename\":\"single-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":2960,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.weaken(server)\\r\\n}\",\"filename\":\"single-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":2961,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.share()\\r\\n\\t}\\r\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"phantasy\",\"moduleSequenceNumber\":2962,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//hack\\r\\n//weaken\\r\\n//grow\\r\\n//weaken\\r\\n//establish target\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // ns.tail()\\r\\n    ns.disableLog(\\\"ALL\\\")\\r\\n    ns.print(\\\"---\\\")\\r\\n    var server = ns.args[0]\\r\\n    var targetServer = ns.args[1]\\r\\n    const scriptCost = 1.75\\r\\n    // try {\\r\\n    //     ns.exec(\\\"no-hack.js\\\", \\\"home\\\", 1, targetServer)\\r\\n    // } catch {\\r\\n    //     ns.print(\\\"Maybe it's already running\\\")\\r\\n    // }\\r\\n    // ns.print(targetServer)\\r\\n\\r\\n    //establish timing\\r\\n    const scriptOffset = 20\\r\\n    const batchBuffer = 500\\r\\n    var hackTime= 0\\r\\n    var weakTime= 0\\r\\n    var growTime= 0\\r\\n    var totalTime = 0\\r\\n    var potentialBatches = 0\\r\\n    var batchOffset = 0\\r\\n    var hackOffset = 0\\r\\n    var growOffset = 0\\r\\n    var weakOffset = 0\\r\\n\\r\\n    function establishTiming(){\\r\\n        hackTime= ns.getHackTime(targetServer)\\r\\n        weakTime= ns.getWeakenTime(targetServer)\\r\\n        growTime= ns.getGrowTime(targetServer)\\r\\n        totalTime = weakTime + scriptOffset * 3\\r\\n        potentialBatches = Math.floor(totalTime / ((scriptOffset * 4) + batchBuffer))\\r\\n        batchOffset = totalTime / potentialBatches\\r\\n        // ns.print(\\\"potentialBatches: \\\", potentialBatches)\\r\\n        // ns.print(\\\"batchOffset: \\\", batchOffset)\\r\\n        if (hackTime < growTime && growTime < weakTime) {\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            growOffset = (weakTime - growTime) + scriptOffset\\r\\n            weakOffset = scriptOffset * 2\\r\\n        } else {\\r\\n            ns.print(\\\"Timing doesn't work\\\")\\r\\n        }\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            return [potentialBatches, batchOffset, growOffset, weakOffset]\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n    var serverMoney = 0\\r\\n    var desiredHackAmount = 0\\r\\n    var desiredHackThreads = 0\\r\\n    var hackSecurityIncrease = 0\\r\\n    var weakenChange = 0\\r\\n    var weakenHackThreads = 0\\r\\n    var desiredGrowMultiplier = 0\\r\\n    var desiredGrowThreads = 0\\r\\n    var growSecurityIncrease = 0\\r\\n    var weakenGrowThreads = 0\\r\\n\\r\\n    function establishThreads(hackTarget) {\\r\\n        serverMoney = ns.getServerMoneyAvailable(targetServer)\\r\\n        desiredHackAmount = (serverMoney * hackTarget)\\r\\n        desiredHackThreads = Math.ceil(ns.hackAnalyzeThreads(targetServer, desiredHackAmount))\\r\\n        hackSecurityIncrease = (ns.hackAnalyzeSecurity(desiredHackThreads, targetServer) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenChange = ns.weakenAnalyze(1, 1)\\r\\n        weakenHackThreads = Math.ceil(hackSecurityIncrease / weakenChange)\\r\\n        desiredGrowMultiplier = (serverMoney / (serverMoney - desiredHackAmount))\\r\\n        if (!desiredGrowMultiplier){\\r\\n            desiredGrowMultiplier = 900\\r\\n        } else if (desiredGrowMultiplier < 1) {\\r\\n            desiredGrowMultiplier = 1\\r\\n        }\\r\\n        desiredGrowThreads = Math.ceil(ns.growthAnalyze(targetServer, desiredGrowMultiplier*1.15))\\r\\n        growSecurityIncrease = ((ns.growthAnalyzeSecurity(1, targetServer, 1)*desiredGrowThreads) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenGrowThreads = Math.ceil(growSecurityIncrease*1.15 / weakenChange)\\r\\n        // ns.print(\\\"desiredGrowMultiplier \\\", desiredGrowMultiplier)\\r\\n        // ns.print(\\\"desiredGrowThreads \\\", desiredGrowThreads)\\r\\n        return [desiredHackThreads+1, weakenHackThreads+1, desiredGrowThreads+1, weakenGrowThreads+1];\\r\\n    }\\r\\n\\r\\n    // [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n    [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n    // ns.exec(\\\"single-hack.js\\\", server, 1, targetServer, 0)\\r\\n    // await ns.sleep(hackTime+100)\\r\\n    \\r\\n    var batchCost = 16\\r\\n\\r\\n    while (true) {\\r\\n        // var spaceAvailable = true\\r\\n        var hackTarget = 0.90\\r\\n        // ns.printf(\\\"desiredGrowThreads %s\\\", desiredGrowThreads)\\r\\n        let [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n        for (let i = 1; i < potentialBatches; i++) {\\r\\n            while (batchCost >= 16 && hackTarget > 0.05) {\\r\\n                let [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n                batchCost = (desiredHackThreads + weakenHackThreads + desiredGrowThreads + weakenGrowThreads) * scriptCost;\\r\\n                if ((ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) > batchCost){\\r\\n                    if (serverMoney/ns.getServerMaxMoney(targetServer) <= 0.10) {\\r\\n                        desiredHackThreads  = 1\\r\\n                    }\\r\\n                    ns.print(\\\"+++\\\")\\r\\n                    ns.printf(\\\"Hacking for %s\\\", hackTarget*100)\\r\\n                    // ns.print(\\\"batch \\\", i)\\r\\n                    ns.printf(\\\"hack %s with %s threads from %s\\\", targetServer, desiredHackThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenHackThreads, server)\\r\\n                    ns.printf(\\\"grow %s with %s threads from %s\\\", targetServer, desiredGrowThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenGrowThreads, server)\\r\\n                    ns.exec(\\\"single-hack.js\\\", server, desiredHackThreads, targetServer, hackOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenHackThreads, targetServer, 0, Math.random())\\r\\n                    ns.exec(\\\"single-grow.js\\\", server, desiredGrowThreads, targetServer, growOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenGrowThreads, targetServer, weakOffset, Math.random())\\r\\n                    // spaceAvailable = true\\r\\n                    await ns.sleep(batchOffset)\\r\\n                } else {\\r\\n                    // ns.print(\\\"Not enough ram on \\\", server)\\r\\n                    // ns.print(\\\"batchCost \\\", batchCost)\\r\\n                    // ns.printf(\\\"desiredHackThreads: %s, %s\\\",desiredHackThreads,desiredHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenHackThreads: %s, %s\\\",weakenHackThreads,weakenHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"desiredGrowThreads: %s, %s\\\",desiredGrowThreads,desiredGrowThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenGrowThreads: %s, %s\\\",weakenGrowThreads,weakenGrowThreads*scriptCost)\\r\\n                    // spaceAvailable = false\\r\\n                    hackTarget = hackTarget / 2\\r\\n                    // ns.print(\\\"hackTarget: \\\",hackTarget)\\r\\n                    await ns.sleep(60)\\r\\n                    break\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // ns.printf(\\\"Sleeping for %sms\\\", batchOffset)\\r\\n        await ns.sleep(batchOffset)\\r\\n    }\\r\\n    \\r\\n}\",\"filename\":\"batch-job.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.45,\"server\":\"phantasy\",\"moduleSequenceNumber\":2963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"max-hardware\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"45.9.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",200],\"dataMap\":{\"joesguns\":[0,0,54,0]},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":502.20000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.8099999999982,\"pid\":1194,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.hack(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":2914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.grow(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///fb76ff13-58a1-46f9-84e2-207e738f297f\",\"moduleSequenceNumber\":3170}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":3170,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\t// ns.print(ns.args.length);\\r\\n\\twhile(true) {\\r\\n\\t\\tawait ns.weaken(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":2916,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, (hackingChance*100).toFixed(2), (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.15) {\\r\\n\\t\\t\\t// ns.print(\\\"weakening \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.60) {\\r\\n\\t\\t\\t// ns.print(\\\"growing \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"oversight.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"max-hardware\",\"moduleSequenceNumber\":2917,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    // ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, hackingChance*100, (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.9) {\\r\\n\\t\\t\\tns.print(\\\"weakening \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.75) {\\r\\n\\t\\t\\tns.print(\\\"growing \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"aio.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":2918,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.hack(server)\\r\\n}\",\"filename\":\"single-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":2919,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.grow(server)\\r\\n}\",\"filename\":\"single-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":2920,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.weaken(server)\\r\\n}\",\"filename\":\"single-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":2921,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.share()\\r\\n\\t}\\r\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":2922,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//hack\\r\\n//weaken\\r\\n//grow\\r\\n//weaken\\r\\n//establish target\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // ns.tail()\\r\\n    ns.disableLog(\\\"ALL\\\")\\r\\n    ns.print(\\\"---\\\")\\r\\n    var server = ns.args[0]\\r\\n    var targetServer = ns.args[1]\\r\\n    const scriptCost = 1.75\\r\\n    // try {\\r\\n    //     ns.exec(\\\"no-hack.js\\\", \\\"home\\\", 1, targetServer)\\r\\n    // } catch {\\r\\n    //     ns.print(\\\"Maybe it's already running\\\")\\r\\n    // }\\r\\n    // ns.print(targetServer)\\r\\n\\r\\n    //establish timing\\r\\n    const scriptOffset = 20\\r\\n    const batchBuffer = 500\\r\\n    var hackTime= 0\\r\\n    var weakTime= 0\\r\\n    var growTime= 0\\r\\n    var totalTime = 0\\r\\n    var potentialBatches = 0\\r\\n    var batchOffset = 0\\r\\n    var hackOffset = 0\\r\\n    var growOffset = 0\\r\\n    var weakOffset = 0\\r\\n\\r\\n    function establishTiming(){\\r\\n        hackTime= ns.getHackTime(targetServer)\\r\\n        weakTime= ns.getWeakenTime(targetServer)\\r\\n        growTime= ns.getGrowTime(targetServer)\\r\\n        totalTime = weakTime + scriptOffset * 3\\r\\n        potentialBatches = Math.floor(totalTime / ((scriptOffset * 4) + batchBuffer))\\r\\n        batchOffset = totalTime / potentialBatches\\r\\n        // ns.print(\\\"potentialBatches: \\\", potentialBatches)\\r\\n        // ns.print(\\\"batchOffset: \\\", batchOffset)\\r\\n        if (hackTime < growTime && growTime < weakTime) {\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            growOffset = (weakTime - growTime) + scriptOffset\\r\\n            weakOffset = scriptOffset * 2\\r\\n        } else {\\r\\n            ns.print(\\\"Timing doesn't work\\\")\\r\\n        }\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            return [potentialBatches, batchOffset, growOffset, weakOffset]\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n    var serverMoney = 0\\r\\n    var desiredHackAmount = 0\\r\\n    var desiredHackThreads = 0\\r\\n    var hackSecurityIncrease = 0\\r\\n    var weakenChange = 0\\r\\n    var weakenHackThreads = 0\\r\\n    var desiredGrowMultiplier = 0\\r\\n    var desiredGrowThreads = 0\\r\\n    var growSecurityIncrease = 0\\r\\n    var weakenGrowThreads = 0\\r\\n\\r\\n    function establishThreads(hackTarget) {\\r\\n        serverMoney = ns.getServerMoneyAvailable(targetServer)\\r\\n        desiredHackAmount = (serverMoney * hackTarget)\\r\\n        desiredHackThreads = Math.ceil(ns.hackAnalyzeThreads(targetServer, desiredHackAmount))\\r\\n        hackSecurityIncrease = (ns.hackAnalyzeSecurity(desiredHackThreads, targetServer) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenChange = ns.weakenAnalyze(1, 1)\\r\\n        weakenHackThreads = Math.ceil(hackSecurityIncrease / weakenChange)\\r\\n        desiredGrowMultiplier = (serverMoney / (serverMoney - desiredHackAmount))\\r\\n        if (!desiredGrowMultiplier){\\r\\n            desiredGrowMultiplier = 900\\r\\n        } else if (desiredGrowMultiplier < 1) {\\r\\n            desiredGrowMultiplier = 1\\r\\n        }\\r\\n        desiredGrowThreads = Math.ceil(ns.growthAnalyze(targetServer, desiredGrowMultiplier*1.15))\\r\\n        growSecurityIncrease = ((ns.growthAnalyzeSecurity(1, targetServer, 1)*desiredGrowThreads) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenGrowThreads = Math.ceil(growSecurityIncrease*1.15 / weakenChange)\\r\\n        // ns.print(\\\"desiredGrowMultiplier \\\", desiredGrowMultiplier)\\r\\n        // ns.print(\\\"desiredGrowThreads \\\", desiredGrowThreads)\\r\\n        return [desiredHackThreads+1, weakenHackThreads+1, desiredGrowThreads+1, weakenGrowThreads+1];\\r\\n    }\\r\\n\\r\\n    // [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n    [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n    // ns.exec(\\\"single-hack.js\\\", server, 1, targetServer, 0)\\r\\n    // await ns.sleep(hackTime+100)\\r\\n    \\r\\n    var batchCost = 16\\r\\n\\r\\n    while (true) {\\r\\n        // var spaceAvailable = true\\r\\n        var hackTarget = 0.90\\r\\n        // ns.printf(\\\"desiredGrowThreads %s\\\", desiredGrowThreads)\\r\\n        let [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n        for (let i = 1; i < potentialBatches; i++) {\\r\\n            while (batchCost >= 16 && hackTarget > 0.05) {\\r\\n                let [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n                batchCost = (desiredHackThreads + weakenHackThreads + desiredGrowThreads + weakenGrowThreads) * scriptCost;\\r\\n                if ((ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) > batchCost){\\r\\n                    if (serverMoney/ns.getServerMaxMoney(targetServer) <= 0.10) {\\r\\n                        desiredHackThreads  = 1\\r\\n                    }\\r\\n                    ns.print(\\\"+++\\\")\\r\\n                    ns.printf(\\\"Hacking for %s\\\", hackTarget*100)\\r\\n                    // ns.print(\\\"batch \\\", i)\\r\\n                    ns.printf(\\\"hack %s with %s threads from %s\\\", targetServer, desiredHackThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenHackThreads, server)\\r\\n                    ns.printf(\\\"grow %s with %s threads from %s\\\", targetServer, desiredGrowThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenGrowThreads, server)\\r\\n                    ns.exec(\\\"single-hack.js\\\", server, desiredHackThreads, targetServer, hackOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenHackThreads, targetServer, 0, Math.random())\\r\\n                    ns.exec(\\\"single-grow.js\\\", server, desiredGrowThreads, targetServer, growOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenGrowThreads, targetServer, weakOffset, Math.random())\\r\\n                    // spaceAvailable = true\\r\\n                    await ns.sleep(batchOffset)\\r\\n                } else {\\r\\n                    // ns.print(\\\"Not enough ram on \\\", server)\\r\\n                    // ns.print(\\\"batchCost \\\", batchCost)\\r\\n                    // ns.printf(\\\"desiredHackThreads: %s, %s\\\",desiredHackThreads,desiredHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenHackThreads: %s, %s\\\",weakenHackThreads,weakenHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"desiredGrowThreads: %s, %s\\\",desiredGrowThreads,desiredGrowThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenGrowThreads: %s, %s\\\",weakenGrowThreads,weakenGrowThreads*scriptCost)\\r\\n                    // spaceAvailable = false\\r\\n                    hackTarget = hackTarget / 2\\r\\n                    // ns.print(\\\"hackTarget: \\\",hackTarget)\\r\\n                    await ns.sleep(60)\\r\\n                    break\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // ns.printf(\\\"Sleeping for %sms\\\", batchOffset)\\r\\n        await ns.sleep(batchOffset)\\r\\n    }\\r\\n    \\r\\n}\",\"filename\":\"batch-job.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.45,\"server\":\"max-hardware\",\"moduleSequenceNumber\":2923,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-86313-Joe'sGuns.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[37,47,48,19,31,3,21,25],[18,28,28,42,26,47,50,27],[34,14,9,44,20,24,3,3],[48,33,27,16,14,15,35,34],[36,23,34,10,5,49,16,44],[34,33,47,30,22,7,43,33],[47,8,3,24,50,34,35,35],[10,43,13,19,37,16,4,47],[48,29,17,11,36,23,29,31],[33,35,20,15,46,34,32,45],[34,28,1,45,5,29,14,35],[46,4,23,46,31,38,29,27]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"88.2.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":68662801,\"moneyMax\":1716570025,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":217,\"serverGrowth\":30}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"90.7.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":48894078,\"moneyMax\":1222351950,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":238,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-424128.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[128,138,150,35,100,91,19,37,79,22,1,170,127,147,57,174,58,189,136,63,120,63,137,44,43,33,59,191]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"4.9.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",200],\"dataMap\":{\"joesguns\":[0,0,54,0]},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":502.20000000000005,\"onlineMoneyMade\":0,\"onlineRunningTime\":181.8099999999982,\"pid\":1205,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.hack(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":3134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.grow(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///a0b8a79a-5551-4ba6-aa7e-4ea01b239bd7\",\"moduleSequenceNumber\":3181}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":3181,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\t// ns.print(ns.args.length);\\r\\n\\twhile(true) {\\r\\n\\t\\tawait ns.weaken(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":3136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, (hackingChance*100).toFixed(2), (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.15) {\\r\\n\\t\\t\\t// ns.print(\\\"weakening \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.60) {\\r\\n\\t\\t\\t// ns.print(\\\"growing \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"oversight.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"iron-gym\",\"moduleSequenceNumber\":3137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    // ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, hackingChance*100, (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.9) {\\r\\n\\t\\t\\tns.print(\\\"weakening \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.75) {\\r\\n\\t\\t\\tns.print(\\\"growing \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"aio.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":3138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.hack(server)\\r\\n}\",\"filename\":\"single-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":3139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.grow(server)\\r\\n}\",\"filename\":\"single-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":3140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.weaken(server)\\r\\n}\",\"filename\":\"single-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":3141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.share()\\r\\n\\t}\\r\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":3142,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//hack\\r\\n//weaken\\r\\n//grow\\r\\n//weaken\\r\\n//establish target\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // ns.tail()\\r\\n    ns.disableLog(\\\"ALL\\\")\\r\\n    ns.print(\\\"---\\\")\\r\\n    var server = ns.args[0]\\r\\n    var targetServer = ns.args[1]\\r\\n    const scriptCost = 1.75\\r\\n    // try {\\r\\n    //     ns.exec(\\\"no-hack.js\\\", \\\"home\\\", 1, targetServer)\\r\\n    // } catch {\\r\\n    //     ns.print(\\\"Maybe it's already running\\\")\\r\\n    // }\\r\\n    // ns.print(targetServer)\\r\\n\\r\\n    //establish timing\\r\\n    const scriptOffset = 20\\r\\n    const batchBuffer = 500\\r\\n    var hackTime= 0\\r\\n    var weakTime= 0\\r\\n    var growTime= 0\\r\\n    var totalTime = 0\\r\\n    var potentialBatches = 0\\r\\n    var batchOffset = 0\\r\\n    var hackOffset = 0\\r\\n    var growOffset = 0\\r\\n    var weakOffset = 0\\r\\n\\r\\n    function establishTiming(){\\r\\n        hackTime= ns.getHackTime(targetServer)\\r\\n        weakTime= ns.getWeakenTime(targetServer)\\r\\n        growTime= ns.getGrowTime(targetServer)\\r\\n        totalTime = weakTime + scriptOffset * 3\\r\\n        potentialBatches = Math.floor(totalTime / ((scriptOffset * 4) + batchBuffer))\\r\\n        batchOffset = totalTime / potentialBatches\\r\\n        // ns.print(\\\"potentialBatches: \\\", potentialBatches)\\r\\n        // ns.print(\\\"batchOffset: \\\", batchOffset)\\r\\n        if (hackTime < growTime && growTime < weakTime) {\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            growOffset = (weakTime - growTime) + scriptOffset\\r\\n            weakOffset = scriptOffset * 2\\r\\n        } else {\\r\\n            ns.print(\\\"Timing doesn't work\\\")\\r\\n        }\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            return [potentialBatches, batchOffset, growOffset, weakOffset]\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n    var serverMoney = 0\\r\\n    var desiredHackAmount = 0\\r\\n    var desiredHackThreads = 0\\r\\n    var hackSecurityIncrease = 0\\r\\n    var weakenChange = 0\\r\\n    var weakenHackThreads = 0\\r\\n    var desiredGrowMultiplier = 0\\r\\n    var desiredGrowThreads = 0\\r\\n    var growSecurityIncrease = 0\\r\\n    var weakenGrowThreads = 0\\r\\n\\r\\n    function establishThreads(hackTarget) {\\r\\n        serverMoney = ns.getServerMoneyAvailable(targetServer)\\r\\n        desiredHackAmount = (serverMoney * hackTarget)\\r\\n        desiredHackThreads = Math.ceil(ns.hackAnalyzeThreads(targetServer, desiredHackAmount))\\r\\n        hackSecurityIncrease = (ns.hackAnalyzeSecurity(desiredHackThreads, targetServer) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenChange = ns.weakenAnalyze(1, 1)\\r\\n        weakenHackThreads = Math.ceil(hackSecurityIncrease / weakenChange)\\r\\n        desiredGrowMultiplier = (serverMoney / (serverMoney - desiredHackAmount))\\r\\n        if (!desiredGrowMultiplier){\\r\\n            desiredGrowMultiplier = 900\\r\\n        } else if (desiredGrowMultiplier < 1) {\\r\\n            desiredGrowMultiplier = 1\\r\\n        }\\r\\n        desiredGrowThreads = Math.ceil(ns.growthAnalyze(targetServer, desiredGrowMultiplier*1.15))\\r\\n        growSecurityIncrease = ((ns.growthAnalyzeSecurity(1, targetServer, 1)*desiredGrowThreads) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenGrowThreads = Math.ceil(growSecurityIncrease*1.15 / weakenChange)\\r\\n        // ns.print(\\\"desiredGrowMultiplier \\\", desiredGrowMultiplier)\\r\\n        // ns.print(\\\"desiredGrowThreads \\\", desiredGrowThreads)\\r\\n        return [desiredHackThreads+1, weakenHackThreads+1, desiredGrowThreads+1, weakenGrowThreads+1];\\r\\n    }\\r\\n\\r\\n    // [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n    [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n    // ns.exec(\\\"single-hack.js\\\", server, 1, targetServer, 0)\\r\\n    // await ns.sleep(hackTime+100)\\r\\n    \\r\\n    var batchCost = 16\\r\\n\\r\\n    while (true) {\\r\\n        // var spaceAvailable = true\\r\\n        var hackTarget = 0.90\\r\\n        // ns.printf(\\\"desiredGrowThreads %s\\\", desiredGrowThreads)\\r\\n        let [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n        for (let i = 1; i < potentialBatches; i++) {\\r\\n            while (batchCost >= 16 && hackTarget > 0.05) {\\r\\n                let [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n                batchCost = (desiredHackThreads + weakenHackThreads + desiredGrowThreads + weakenGrowThreads) * scriptCost;\\r\\n                if ((ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) > batchCost){\\r\\n                    if (serverMoney/ns.getServerMaxMoney(targetServer) <= 0.10) {\\r\\n                        desiredHackThreads  = 1\\r\\n                    }\\r\\n                    ns.print(\\\"+++\\\")\\r\\n                    ns.printf(\\\"Hacking for %s\\\", hackTarget*100)\\r\\n                    // ns.print(\\\"batch \\\", i)\\r\\n                    ns.printf(\\\"hack %s with %s threads from %s\\\", targetServer, desiredHackThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenHackThreads, server)\\r\\n                    ns.printf(\\\"grow %s with %s threads from %s\\\", targetServer, desiredGrowThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenGrowThreads, server)\\r\\n                    ns.exec(\\\"single-hack.js\\\", server, desiredHackThreads, targetServer, hackOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenHackThreads, targetServer, 0, Math.random())\\r\\n                    ns.exec(\\\"single-grow.js\\\", server, desiredGrowThreads, targetServer, growOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenGrowThreads, targetServer, weakOffset, Math.random())\\r\\n                    // spaceAvailable = true\\r\\n                    await ns.sleep(batchOffset)\\r\\n                } else {\\r\\n                    // ns.print(\\\"Not enough ram on \\\", server)\\r\\n                    // ns.print(\\\"batchCost \\\", batchCost)\\r\\n                    // ns.printf(\\\"desiredHackThreads: %s, %s\\\",desiredHackThreads,desiredHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenHackThreads: %s, %s\\\",weakenHackThreads,weakenHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"desiredGrowThreads: %s, %s\\\",desiredGrowThreads,desiredGrowThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenGrowThreads: %s, %s\\\",weakenGrowThreads,weakenGrowThreads*scriptCost)\\r\\n                    // spaceAvailable = false\\r\\n                    hackTarget = hackTarget / 2\\r\\n                    // ns.print(\\\"hackTarget: \\\",hackTarget)\\r\\n                    await ns.sleep(60)\\r\\n                    break\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // ns.printf(\\\"Sleeping for %sms\\\", batchOffset)\\r\\n        await ns.sleep(batchOffset)\\r\\n    }\\r\\n    \\r\\n}\",\"filename\":\"batch-job.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.45,\"server\":\"iron-gym\",\"moduleSequenceNumber\":3143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"73.5.7.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":493,\"serverGrowth\":42}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-211033-FoodNStuff.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"NLKhdghdghdghd6Yt8qZGhRt8qZG8yVM8cTo2FF0ZcToaIyObcToaI7OO5I7OOhH5O5I7OOhH5k72727276bKeBODi\",\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"27.1.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":953,\"serverGrowth\":57}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"61.2.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":709,\"serverGrowth\":54}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"65.3.4.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":507,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-199215.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[1,-1,-9,-5,-2,10,0,-8,-3,-7,-4,-5,-8,-10,3,8,-6,-10,0,6,-8,2,5,-1,5,1,-2,-6,-5],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"85.0.9.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":347,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"22.8.9.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":206,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"95.3.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":533,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"27.2.8.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",0],\"dataMap\":{\"joesguns\":[0,0,0,4]},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":37.2,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.01000000000059,\"pid\":1346,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.hack(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":3114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.grow(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///388943a3-3c43-405d-887e-2b61b6216d4f\",\"moduleSequenceNumber\":3180}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":3180,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\t// ns.print(ns.args.length);\\r\\n\\twhile(true) {\\r\\n\\t\\tawait ns.weaken(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///352516d4-1f3d-4e60-aa80-082616a76283\",\"moduleSequenceNumber\":3368}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":3368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, (hackingChance*100).toFixed(2), (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.15) {\\r\\n\\t\\t\\t// ns.print(\\\"weakening \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.60) {\\r\\n\\t\\t\\t// ns.print(\\\"growing \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"oversight.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"CSEC\",\"moduleSequenceNumber\":3117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    // ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, hackingChance*100, (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.9) {\\r\\n\\t\\t\\tns.print(\\\"weakening \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.75) {\\r\\n\\t\\t\\tns.print(\\\"growing \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"aio.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"CSEC\",\"moduleSequenceNumber\":3118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.hack(server)\\r\\n}\",\"filename\":\"single-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":3119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.grow(server)\\r\\n}\",\"filename\":\"single-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":3120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.weaken(server)\\r\\n}\",\"filename\":\"single-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":3121,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.share()\\r\\n\\t}\\r\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"CSEC\",\"moduleSequenceNumber\":3122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//hack\\r\\n//weaken\\r\\n//grow\\r\\n//weaken\\r\\n//establish target\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // ns.tail()\\r\\n    ns.disableLog(\\\"ALL\\\")\\r\\n    ns.print(\\\"---\\\")\\r\\n    var server = ns.args[0]\\r\\n    var targetServer = ns.args[1]\\r\\n    const scriptCost = 1.75\\r\\n    // try {\\r\\n    //     ns.exec(\\\"no-hack.js\\\", \\\"home\\\", 1, targetServer)\\r\\n    // } catch {\\r\\n    //     ns.print(\\\"Maybe it's already running\\\")\\r\\n    // }\\r\\n    // ns.print(targetServer)\\r\\n\\r\\n    //establish timing\\r\\n    const scriptOffset = 20\\r\\n    const batchBuffer = 500\\r\\n    var hackTime= 0\\r\\n    var weakTime= 0\\r\\n    var growTime= 0\\r\\n    var totalTime = 0\\r\\n    var potentialBatches = 0\\r\\n    var batchOffset = 0\\r\\n    var hackOffset = 0\\r\\n    var growOffset = 0\\r\\n    var weakOffset = 0\\r\\n\\r\\n    function establishTiming(){\\r\\n        hackTime= ns.getHackTime(targetServer)\\r\\n        weakTime= ns.getWeakenTime(targetServer)\\r\\n        growTime= ns.getGrowTime(targetServer)\\r\\n        totalTime = weakTime + scriptOffset * 3\\r\\n        potentialBatches = Math.floor(totalTime / ((scriptOffset * 4) + batchBuffer))\\r\\n        batchOffset = totalTime / potentialBatches\\r\\n        // ns.print(\\\"potentialBatches: \\\", potentialBatches)\\r\\n        // ns.print(\\\"batchOffset: \\\", batchOffset)\\r\\n        if (hackTime < growTime && growTime < weakTime) {\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            growOffset = (weakTime - growTime) + scriptOffset\\r\\n            weakOffset = scriptOffset * 2\\r\\n        } else {\\r\\n            ns.print(\\\"Timing doesn't work\\\")\\r\\n        }\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            return [potentialBatches, batchOffset, growOffset, weakOffset]\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n    var serverMoney = 0\\r\\n    var desiredHackAmount = 0\\r\\n    var desiredHackThreads = 0\\r\\n    var hackSecurityIncrease = 0\\r\\n    var weakenChange = 0\\r\\n    var weakenHackThreads = 0\\r\\n    var desiredGrowMultiplier = 0\\r\\n    var desiredGrowThreads = 0\\r\\n    var growSecurityIncrease = 0\\r\\n    var weakenGrowThreads = 0\\r\\n\\r\\n    function establishThreads(hackTarget) {\\r\\n        serverMoney = ns.getServerMoneyAvailable(targetServer)\\r\\n        desiredHackAmount = (serverMoney * hackTarget)\\r\\n        desiredHackThreads = Math.ceil(ns.hackAnalyzeThreads(targetServer, desiredHackAmount))\\r\\n        hackSecurityIncrease = (ns.hackAnalyzeSecurity(desiredHackThreads, targetServer) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenChange = ns.weakenAnalyze(1, 1)\\r\\n        weakenHackThreads = Math.ceil(hackSecurityIncrease / weakenChange)\\r\\n        desiredGrowMultiplier = (serverMoney / (serverMoney - desiredHackAmount))\\r\\n        if (!desiredGrowMultiplier){\\r\\n            desiredGrowMultiplier = 900\\r\\n        } else if (desiredGrowMultiplier < 1) {\\r\\n            desiredGrowMultiplier = 1\\r\\n        }\\r\\n        desiredGrowThreads = Math.ceil(ns.growthAnalyze(targetServer, desiredGrowMultiplier*1.15))\\r\\n        growSecurityIncrease = ((ns.growthAnalyzeSecurity(1, targetServer, 1)*desiredGrowThreads) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenGrowThreads = Math.ceil(growSecurityIncrease*1.15 / weakenChange)\\r\\n        // ns.print(\\\"desiredGrowMultiplier \\\", desiredGrowMultiplier)\\r\\n        // ns.print(\\\"desiredGrowThreads \\\", desiredGrowThreads)\\r\\n        return [desiredHackThreads+1, weakenHackThreads+1, desiredGrowThreads+1, weakenGrowThreads+1];\\r\\n    }\\r\\n\\r\\n    // [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n    [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n    // ns.exec(\\\"single-hack.js\\\", server, 1, targetServer, 0)\\r\\n    // await ns.sleep(hackTime+100)\\r\\n    \\r\\n    var batchCost = 16\\r\\n\\r\\n    while (true) {\\r\\n        // var spaceAvailable = true\\r\\n        var hackTarget = 0.90\\r\\n        // ns.printf(\\\"desiredGrowThreads %s\\\", desiredGrowThreads)\\r\\n        let [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n        for (let i = 1; i < potentialBatches; i++) {\\r\\n            while (batchCost >= 16 && hackTarget > 0.05) {\\r\\n                let [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n                batchCost = (desiredHackThreads + weakenHackThreads + desiredGrowThreads + weakenGrowThreads) * scriptCost;\\r\\n                if ((ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) > batchCost){\\r\\n                    if (serverMoney/ns.getServerMaxMoney(targetServer) <= 0.10) {\\r\\n                        desiredHackThreads  = 1\\r\\n                    }\\r\\n                    ns.print(\\\"+++\\\")\\r\\n                    ns.printf(\\\"Hacking for %s\\\", hackTarget*100)\\r\\n                    // ns.print(\\\"batch \\\", i)\\r\\n                    ns.printf(\\\"hack %s with %s threads from %s\\\", targetServer, desiredHackThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenHackThreads, server)\\r\\n                    ns.printf(\\\"grow %s with %s threads from %s\\\", targetServer, desiredGrowThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenGrowThreads, server)\\r\\n                    ns.exec(\\\"single-hack.js\\\", server, desiredHackThreads, targetServer, hackOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenHackThreads, targetServer, 0, Math.random())\\r\\n                    ns.exec(\\\"single-grow.js\\\", server, desiredGrowThreads, targetServer, growOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenGrowThreads, targetServer, weakOffset, Math.random())\\r\\n                    // spaceAvailable = true\\r\\n                    await ns.sleep(batchOffset)\\r\\n                } else {\\r\\n                    // ns.print(\\\"Not enough ram on \\\", server)\\r\\n                    // ns.print(\\\"batchCost \\\", batchCost)\\r\\n                    // ns.printf(\\\"desiredHackThreads: %s, %s\\\",desiredHackThreads,desiredHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenHackThreads: %s, %s\\\",weakenHackThreads,weakenHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"desiredGrowThreads: %s, %s\\\",desiredGrowThreads,desiredGrowThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenGrowThreads: %s, %s\\\",weakenGrowThreads,weakenGrowThreads*scriptCost)\\r\\n                    // spaceAvailable = false\\r\\n                    hackTarget = hackTarget / 2\\r\\n                    // ns.print(\\\"hackTarget: \\\",hackTarget)\\r\\n                    await ns.sleep(60)\\r\\n                    break\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // ns.printf(\\\"Sleeping for %sms\\\", batchOffset)\\r\\n        await ns.sleep(batchOffset)\\r\\n    }\\r\\n    \\r\\n}\",\"filename\":\"batch-job.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.45,\"server\":\"CSEC\",\"moduleSequenceNumber\":3123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":55,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"73.6.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"95.1.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"64.7.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"node\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"node\",\"httpPortOpen\":false,\"ip\":\"34.8.9.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":489,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",26644.632852292027,0.5022580299338111],\"dataMap\":{},\"filename\":\"single-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":1415,\"ramUsage\":1.7,\"server\":\"node\",\"threads\":12,\"dependencies\":[{\"filename\":\"single-hack.js\",\"url\":\"blob:file:///a8b95ab0-1e8e-49e3-b0fc-c4e827519e51\",\"moduleSequenceNumber\":3164}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0,0.023418013444503227],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":1416,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",7130.568760611204,0.4970835839225396],\"dataMap\":{},\"filename\":\"single-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":1417,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":3,\"dependencies\":[{\"filename\":\"single-grow.js\",\"url\":\"blob:file:///c6d22227-a59e-445c-b290-e94971f80eb9\",\"moduleSequenceNumber\":3166}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",40,0.6414738847343022],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.209999999999965,\"pid\":1418,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",26644.632852292027,0.6114076556334671],\"dataMap\":{},\"filename\":\"single-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.60999999999996,\"pid\":1419,\"ramUsage\":1.7,\"server\":\"node\",\"threads\":12,\"dependencies\":[{\"filename\":\"single-hack.js\",\"url\":\"blob:file:///a8b95ab0-1e8e-49e3-b0fc-c4e827519e51\",\"moduleSequenceNumber\":3164}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0,0.2200960030311665],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.60999999999996,\"pid\":1420,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",7130.568760611204,0.8064371438766211],\"dataMap\":{},\"filename\":\"single-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.60999999999996,\"pid\":1421,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":3,\"dependencies\":[{\"filename\":\"single-grow.js\",\"url\":\"blob:file:///c6d22227-a59e-445c-b290-e94971f80eb9\",\"moduleSequenceNumber\":3166}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",40,0.7133650980326536],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.60999999999996,\"pid\":1422,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",26640.653650254666,0.5689321383711219],\"dataMap\":{},\"filename\":\"single-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.20999999999994,\"pid\":1423,\"ramUsage\":1.7,\"server\":\"node\",\"threads\":23,\"dependencies\":[{\"filename\":\"single-hack.js\",\"url\":\"blob:file:///a8b95ab0-1e8e-49e3-b0fc-c4e827519e51\",\"moduleSequenceNumber\":3164}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0,0.36505121372134974],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.20999999999994,\"pid\":1424,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",7129.507640067906,0.22115950135525098],\"dataMap\":{},\"filename\":\"single-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.20999999999994,\"pid\":1425,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":3,\"dependencies\":[{\"filename\":\"single-grow.js\",\"url\":\"blob:file:///c6d22227-a59e-445c-b290-e94971f80eb9\",\"moduleSequenceNumber\":3166}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",40,0.5078319789677348],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.20999999999994,\"pid\":1426,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",26640.653650254666,0.17071667241785704],\"dataMap\":{},\"filename\":\"single-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.60999999999993,\"pid\":1427,\"ramUsage\":1.7,\"server\":\"node\",\"threads\":12,\"dependencies\":[{\"filename\":\"single-hack.js\",\"url\":\"blob:file:///a8b95ab0-1e8e-49e3-b0fc-c4e827519e51\",\"moduleSequenceNumber\":3164}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0,0.9751450444401752],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.60999999999993,\"pid\":1428,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",7129.507640067906,0.9978072825333704],\"dataMap\":{},\"filename\":\"single-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.60999999999993,\"pid\":1429,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":3,\"dependencies\":[{\"filename\":\"single-grow.js\",\"url\":\"blob:file:///c6d22227-a59e-445c-b290-e94971f80eb9\",\"moduleSequenceNumber\":3166}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",40,0.13275899760829812],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.60999999999993,\"pid\":1430,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",26640.653650254666,0.1869690542261908],\"dataMap\":{},\"filename\":\"single-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.00999999999992,\"pid\":1431,\"ramUsage\":1.7,\"server\":\"node\",\"threads\":12,\"dependencies\":[{\"filename\":\"single-hack.js\",\"url\":\"blob:file:///a8b95ab0-1e8e-49e3-b0fc-c4e827519e51\",\"moduleSequenceNumber\":3164}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0,0.840219246648654],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.00999999999992,\"pid\":1432,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",7129.507640067906,0.2918703180758464],\"dataMap\":{},\"filename\":\"single-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.00999999999992,\"pid\":1433,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":3,\"dependencies\":[{\"filename\":\"single-grow.js\",\"url\":\"blob:file:///c6d22227-a59e-445c-b290-e94971f80eb9\",\"moduleSequenceNumber\":3166}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",40,0.17317440269766182],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":32.00999999999992,\"pid\":1434,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",26640.653650254666,0.33207616905280135],\"dataMap\":{},\"filename\":\"single-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999922,\"pid\":1435,\"ramUsage\":1.7,\"server\":\"node\",\"threads\":13,\"dependencies\":[{\"filename\":\"single-hack.js\",\"url\":\"blob:file:///a8b95ab0-1e8e-49e3-b0fc-c4e827519e51\",\"moduleSequenceNumber\":3164}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0,0.8909417390291772],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999922,\"pid\":1436,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",7129.507640067906,0.056712015292815776],\"dataMap\":{},\"filename\":\"single-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999922,\"pid\":1437,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":3,\"dependencies\":[{\"filename\":\"single-grow.js\",\"url\":\"blob:file:///c6d22227-a59e-445c-b290-e94971f80eb9\",\"moduleSequenceNumber\":3166}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",40,0.18185717283318503],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999922,\"pid\":1438,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",26640.653650254666,0.010625767818487564],\"dataMap\":{},\"filename\":\"single-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.809999999999924,\"pid\":1439,\"ramUsage\":1.7,\"server\":\"node\",\"threads\":13,\"dependencies\":[{\"filename\":\"single-hack.js\",\"url\":\"blob:file:///a8b95ab0-1e8e-49e3-b0fc-c4e827519e51\",\"moduleSequenceNumber\":3164}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0,0.03109107933226074],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.809999999999924,\"pid\":1440,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",7129.507640067906,0.2858626808629685],\"dataMap\":{},\"filename\":\"single-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.809999999999924,\"pid\":1441,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":3,\"dependencies\":[{\"filename\":\"single-grow.js\",\"url\":\"blob:file:///c6d22227-a59e-445c-b290-e94971f80eb9\",\"moduleSequenceNumber\":3166}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",40,0.8312564208685786],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.809999999999924,\"pid\":1442,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",26640.653650254666,0.37133024496262945],\"dataMap\":{},\"filename\":\"single-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.009999999999927,\"pid\":1443,\"ramUsage\":1.7,\"server\":\"node\",\"threads\":13,\"dependencies\":[{\"filename\":\"single-hack.js\",\"url\":\"blob:file:///a8b95ab0-1e8e-49e3-b0fc-c4e827519e51\",\"moduleSequenceNumber\":3164}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0,0.42667568087418273],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.009999999999927,\"pid\":1444,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",7129.507640067906,0.3733509544375657],\"dataMap\":{},\"filename\":\"single-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.009999999999927,\"pid\":1445,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":3,\"dependencies\":[{\"filename\":\"single-grow.js\",\"url\":\"blob:file:///c6d22227-a59e-445c-b290-e94971f80eb9\",\"moduleSequenceNumber\":3166}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",40,0.11896839905358858],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.009999999999927,\"pid\":1446,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",26640.653650254666,0.24180649210428817],\"dataMap\":{},\"filename\":\"single-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.40999999999993,\"pid\":1447,\"ramUsage\":1.7,\"server\":\"node\",\"threads\":13,\"dependencies\":[{\"filename\":\"single-hack.js\",\"url\":\"blob:file:///a8b95ab0-1e8e-49e3-b0fc-c4e827519e51\",\"moduleSequenceNumber\":3164}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0,0.34579921266706015],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.40999999999993,\"pid\":1448,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",7129.507640067906,0.7092747885596893],\"dataMap\":{},\"filename\":\"single-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.40999999999993,\"pid\":1449,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":3,\"dependencies\":[{\"filename\":\"single-grow.js\",\"url\":\"blob:file:///c6d22227-a59e-445c-b290-e94971f80eb9\",\"moduleSequenceNumber\":3166}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",40,0.22165205609664596],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.40999999999993,\"pid\":1450,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",26527.929285814902,0.5254559960643304],\"dataMap\":{},\"filename\":\"single-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.009999999999934,\"pid\":1451,\"ramUsage\":1.7,\"server\":\"node\",\"threads\":24,\"dependencies\":[{\"filename\":\"single-hack.js\",\"url\":\"blob:file:///a8b95ab0-1e8e-49e3-b0fc-c4e827519e51\",\"moduleSequenceNumber\":3164}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0,0.4259512453566414],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.009999999999934,\"pid\":1452,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",7099.447809550638,0.7075146073318184],\"dataMap\":{},\"filename\":\"single-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.009999999999934,\"pid\":1453,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":3,\"dependencies\":[{\"filename\":\"single-grow.js\",\"url\":\"blob:file:///c6d22227-a59e-445c-b290-e94971f80eb9\",\"moduleSequenceNumber\":3166}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",40,0.9445337205995887],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":28.009999999999934,\"pid\":1454,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",26527.929285814902,0.26488533833298056],\"dataMap\":{},\"filename\":\"single-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999936,\"pid\":1455,\"ramUsage\":1.7,\"server\":\"node\",\"threads\":12,\"dependencies\":[{\"filename\":\"single-hack.js\",\"url\":\"blob:file:///a8b95ab0-1e8e-49e3-b0fc-c4e827519e51\",\"moduleSequenceNumber\":3164}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0,0.49451905078198455],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999936,\"pid\":1456,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",7099.447809550638,0.9128674952228208],\"dataMap\":{},\"filename\":\"single-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999936,\"pid\":1457,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":3,\"dependencies\":[{\"filename\":\"single-grow.js\",\"url\":\"blob:file:///c6d22227-a59e-445c-b290-e94971f80eb9\",\"moduleSequenceNumber\":3166}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",40,0.2652973465115971],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999936,\"pid\":1458,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",26527.929285814902,0.7479034545819809],\"dataMap\":{},\"filename\":\"single-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.80999999999994,\"pid\":1459,\"ramUsage\":1.7,\"server\":\"node\",\"threads\":13,\"dependencies\":[{\"filename\":\"single-hack.js\",\"url\":\"blob:file:///a8b95ab0-1e8e-49e3-b0fc-c4e827519e51\",\"moduleSequenceNumber\":3164}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0,0.5367293985439863],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.80999999999994,\"pid\":1460,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",7099.447809550638,0.9114000525108918],\"dataMap\":{},\"filename\":\"single-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.80999999999994,\"pid\":1461,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":3,\"dependencies\":[{\"filename\":\"single-grow.js\",\"url\":\"blob:file:///c6d22227-a59e-445c-b290-e94971f80eb9\",\"moduleSequenceNumber\":3166}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",40,0.46789929771377503],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.80999999999994,\"pid\":1462,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",26298.077084206114,0.2961562241761251],\"dataMap\":{},\"filename\":\"single-hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":1463,\"ramUsage\":1.7,\"server\":\"node\",\"threads\":23,\"dependencies\":[{\"filename\":\"single-hack.js\",\"url\":\"blob:file:///a8b95ab0-1e8e-49e3-b0fc-c4e827519e51\",\"moduleSequenceNumber\":3164}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",0,0.6966857081982496],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":1464,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":2,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",7038.153889121626,0.06919692840805647],\"dataMap\":{},\"filename\":\"single-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":1465,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":3,\"dependencies\":[{\"filename\":\"single-grow.js\",\"url\":\"blob:file:///c6d22227-a59e-445c-b290-e94971f80eb9\",\"moduleSequenceNumber\":3166}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",40,0.8538218110249736],\"dataMap\":{},\"filename\":\"single-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":1466,\"ramUsage\":1.75,\"server\":\"node\",\"threads\":1,\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.hack(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"node\",\"moduleSequenceNumber\":3154,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.grow(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"node\",\"moduleSequenceNumber\":3155,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n\\tvar sleepTime= ns.args[1]\\r\\n\\tawait ns.sleep(sleepTime)\\r\\n\\t// ns.print(ns.args.length);\\r\\n\\twhile(true) {\\r\\n\\t\\tawait ns.weaken(server)\\r\\n\\t}\\r\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"node\",\"moduleSequenceNumber\":3156,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, (hackingChance*100).toFixed(2), (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.15) {\\r\\n\\t\\t\\t// ns.print(\\\"weakening \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.60) {\\r\\n\\t\\t\\t// ns.print(\\\"growing \\\", server)\\r\\n            await ns.sleep(2000)\\r\\n\\t\\t\\t// await ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"oversight.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"node\",\"moduleSequenceNumber\":3157,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n    // ns.tail()\\r\\n\\tconst initSleep = Math.floor(Math.random() * 200)\\r\\n\\tawait ns.sleep(initSleep)\\r\\n\\tvar server = ns.args[0]\\r\\n\\twhile (true) {\\r\\n\\t\\tvar percentMoney = ns.getServerMoneyAvailable(server) / ns.getServerMaxMoney(server)\\r\\n\\t\\tvar hackingChance = ns.hackAnalyzeChance(server)\\r\\n\\t\\tns.printf(\\\"host: %s, hack: %s, money: %s\\\", server, hackingChance*100, (percentMoney*100).toFixed(2))\\r\\n\\t\\tif (hackingChance < 0.9) {\\r\\n\\t\\t\\tns.print(\\\"weakening \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.weaken(server)\\r\\n\\t\\t} else if (percentMoney < 0.75) {\\r\\n\\t\\t\\tns.print(\\\"growing \\\", server)\\r\\n            // await ns.sleep(2000)\\r\\n\\t\\t\\tawait ns.grow(server);\\r\\n\\t\\t} else {\\r\\n            ns.printf(\\\"Hacking...\\\")\\r\\n\\t\\t\\tvar hackAmount = await ns.hack(server);\\r\\n\\t\\t\\tns.printf(\\\"Hacked $%sm\\\", hackAmount/1000000)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"aio.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"node\",\"moduleSequenceNumber\":3158,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.hack(server)\\r\\n}\",\"filename\":\"single-hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"single-hack.js\",\"url\":\"blob:file:///a8b95ab0-1e8e-49e3-b0fc-c4e827519e51\",\"moduleSequenceNumber\":3164}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"node\",\"moduleSequenceNumber\":3164,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.grow(server)\\r\\n}\",\"filename\":\"single-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"single-grow.js\",\"url\":\"blob:file:///c6d22227-a59e-445c-b290-e94971f80eb9\",\"moduleSequenceNumber\":3166}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"node\",\"moduleSequenceNumber\":3166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tvar server = ns.args[0]\\r\\n    await ns.sleep(ns.args[1])\\r\\n    await ns.weaken(server)\\r\\n}\",\"filename\":\"single-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"single-weaken.js\",\"url\":\"blob:file:///7111d9c0-496a-474d-86ac-73dc0c503c07\",\"moduleSequenceNumber\":3167}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"node\",\"moduleSequenceNumber\":3167,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\twhile (true) {\\r\\n\\t\\tawait ns.share()\\r\\n\\t}\\r\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"node\",\"moduleSequenceNumber\":3162,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//hack\\r\\n//weaken\\r\\n//grow\\r\\n//weaken\\r\\n//establish target\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // ns.tail()\\r\\n    ns.disableLog(\\\"ALL\\\")\\r\\n    ns.print(\\\"---\\\")\\r\\n    var server = ns.args[0]\\r\\n    var targetServer = ns.args[1]\\r\\n    const scriptCost = 1.75\\r\\n    // try {\\r\\n    //     ns.exec(\\\"no-hack.js\\\", \\\"home\\\", 1, targetServer)\\r\\n    // } catch {\\r\\n    //     ns.print(\\\"Maybe it's already running\\\")\\r\\n    // }\\r\\n    // ns.print(targetServer)\\r\\n\\r\\n    //establish timing\\r\\n    const scriptOffset = 20\\r\\n    const batchBuffer = 500\\r\\n    var hackTime= 0\\r\\n    var weakTime= 0\\r\\n    var growTime= 0\\r\\n    var totalTime = 0\\r\\n    var potentialBatches = 0\\r\\n    var batchOffset = 0\\r\\n    var hackOffset = 0\\r\\n    var growOffset = 0\\r\\n    var weakOffset = 0\\r\\n\\r\\n    function establishTiming(){\\r\\n        hackTime= ns.getHackTime(targetServer)\\r\\n        weakTime= ns.getWeakenTime(targetServer)\\r\\n        growTime= ns.getGrowTime(targetServer)\\r\\n        totalTime = weakTime + scriptOffset * 3\\r\\n        potentialBatches = Math.floor(totalTime / ((scriptOffset * 4) + batchBuffer))\\r\\n        batchOffset = totalTime / potentialBatches\\r\\n        // ns.print(\\\"potentialBatches: \\\", potentialBatches)\\r\\n        // ns.print(\\\"batchOffset: \\\", batchOffset)\\r\\n        if (hackTime < growTime && growTime < weakTime) {\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            growOffset = (weakTime - growTime) + scriptOffset\\r\\n            weakOffset = scriptOffset * 2\\r\\n        } else {\\r\\n            ns.print(\\\"Timing doesn't work\\\")\\r\\n        }\\r\\n            hackOffset = (weakTime - hackTime) - scriptOffset\\r\\n            return [potentialBatches, batchOffset, growOffset, weakOffset]\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n    var serverMoney = 0\\r\\n    var desiredHackAmount = 0\\r\\n    var desiredHackThreads = 0\\r\\n    var hackSecurityIncrease = 0\\r\\n    var weakenChange = 0\\r\\n    var weakenHackThreads = 0\\r\\n    var desiredGrowMultiplier = 0\\r\\n    var desiredGrowThreads = 0\\r\\n    var growSecurityIncrease = 0\\r\\n    var weakenGrowThreads = 0\\r\\n\\r\\n    function establishThreads(hackTarget) {\\r\\n        serverMoney = ns.getServerMoneyAvailable(targetServer)\\r\\n        desiredHackAmount = (serverMoney * hackTarget)\\r\\n        desiredHackThreads = Math.ceil(ns.hackAnalyzeThreads(targetServer, desiredHackAmount))\\r\\n        hackSecurityIncrease = (ns.hackAnalyzeSecurity(desiredHackThreads, targetServer) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenChange = ns.weakenAnalyze(1, 1)\\r\\n        weakenHackThreads = Math.ceil(hackSecurityIncrease / weakenChange)\\r\\n        desiredGrowMultiplier = (serverMoney / (serverMoney - desiredHackAmount))\\r\\n        if (!desiredGrowMultiplier){\\r\\n            desiredGrowMultiplier = 900\\r\\n        } else if (desiredGrowMultiplier < 1) {\\r\\n            desiredGrowMultiplier = 1\\r\\n        }\\r\\n        desiredGrowThreads = Math.ceil(ns.growthAnalyze(targetServer, desiredGrowMultiplier*1.15))\\r\\n        growSecurityIncrease = ((ns.growthAnalyzeSecurity(1, targetServer, 1)*desiredGrowThreads) * ns.getServerSecurityLevel(targetServer))\\r\\n        weakenGrowThreads = Math.ceil(growSecurityIncrease*1.15 / weakenChange)\\r\\n        // ns.print(\\\"desiredGrowMultiplier \\\", desiredGrowMultiplier)\\r\\n        // ns.print(\\\"desiredGrowThreads \\\", desiredGrowThreads)\\r\\n        return [desiredHackThreads+1, weakenHackThreads+1, desiredGrowThreads+1, weakenGrowThreads+1];\\r\\n    }\\r\\n\\r\\n    // [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n    [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n    // ns.exec(\\\"single-hack.js\\\", server, 1, targetServer, 0)\\r\\n    // await ns.sleep(hackTime+100)\\r\\n    \\r\\n    var batchCost = 16\\r\\n\\r\\n    while (true) {\\r\\n        // var spaceAvailable = true\\r\\n        var hackTarget = 0.90\\r\\n        // ns.printf(\\\"desiredGrowThreads %s\\\", desiredGrowThreads)\\r\\n        let [potentialBatches, batchOffset, growOffset, weakOffset] = establishTiming()\\r\\n        for (let i = 1; i < potentialBatches; i++) {\\r\\n            while (batchCost >= 16 && hackTarget > 0.05) {\\r\\n                let [desiredHackThreads, weakenHackThreads, desiredGrowThreads, weakenGrowThreads] = establishThreads(hackTarget)\\r\\n                batchCost = (desiredHackThreads + weakenHackThreads + desiredGrowThreads + weakenGrowThreads) * scriptCost;\\r\\n                if ((ns.getServerMaxRam(server) - ns.getServerUsedRam(server)) > batchCost){\\r\\n                    if (serverMoney/ns.getServerMaxMoney(targetServer) <= 0.10) {\\r\\n                        desiredHackThreads  = 1\\r\\n                    }\\r\\n                    ns.print(\\\"+++\\\")\\r\\n                    ns.printf(\\\"Hacking for %s\\\", hackTarget*100)\\r\\n                    // ns.print(\\\"batch \\\", i)\\r\\n                    ns.printf(\\\"hack %s with %s threads from %s\\\", targetServer, desiredHackThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenHackThreads, server)\\r\\n                    ns.printf(\\\"grow %s with %s threads from %s\\\", targetServer, desiredGrowThreads, server)\\r\\n                    ns.printf(\\\"weak %s with %s threads from %s\\\", targetServer, weakenGrowThreads, server)\\r\\n                    ns.exec(\\\"single-hack.js\\\", server, desiredHackThreads, targetServer, hackOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenHackThreads, targetServer, 0, Math.random())\\r\\n                    ns.exec(\\\"single-grow.js\\\", server, desiredGrowThreads, targetServer, growOffset, Math.random())\\r\\n                    ns.exec(\\\"single-weaken.js\\\", server, weakenGrowThreads, targetServer, weakOffset, Math.random())\\r\\n                    // spaceAvailable = true\\r\\n                    await ns.sleep(batchOffset)\\r\\n                } else {\\r\\n                    // ns.print(\\\"Not enough ram on \\\", server)\\r\\n                    // ns.print(\\\"batchCost \\\", batchCost)\\r\\n                    // ns.printf(\\\"desiredHackThreads: %s, %s\\\",desiredHackThreads,desiredHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenHackThreads: %s, %s\\\",weakenHackThreads,weakenHackThreads*scriptCost)\\r\\n                    // ns.printf(\\\"desiredGrowThreads: %s, %s\\\",desiredGrowThreads,desiredGrowThreads*scriptCost)\\r\\n                    // ns.printf(\\\"weakenGrowThreads: %s, %s\\\",weakenGrowThreads,weakenGrowThreads*scriptCost)\\r\\n                    // spaceAvailable = false\\r\\n                    hackTarget = hackTarget / 2\\r\\n                    // ns.print(\\\"hackTarget: \\\",hackTarget)\\r\\n                    await ns.sleep(60)\\r\\n                    break\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // ns.printf(\\\"Sleeping for %sms\\\", batchOffset)\\r\\n        await ns.sleep(batchOffset)\\r\\n    }\\r\\n    \\r\\n}\",\"filename\":\"batch-job.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.45,\"server\":\"node\",\"moduleSequenceNumber\":3163,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":17.03621415384675,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":13.419941743589392,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":0.20666666666666667}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":36,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":3,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#28CF28\",\"primary\":\"#21A821\",\"primarydark\":\"#177317\",\"successlight\":\"#1CFF1C\",\"success\":\"#16CA16\",\"successdark\":\"#0D910D\",\"errorlight\":\"#FF3B3B\",\"error\":\"#C32D2D\",\"errordark\":\"#8E2121\",\"secondarylight\":\"#B3B3B3\",\"secondary\":\"#838383\",\"secondarydark\":\"#676767\",\"warninglight\":\"#FFFF3A\",\"warning\":\"#C3C32A\",\"warningdark\":\"#8C8C1E\",\"infolight\":\"#64CBFF\",\"info\":\"#3399CC\",\"infodark\":\"#246D91\",\"welllight\":\"#404040\",\"well\":\"#1C1C1C\",\"white\":\"#C3C3C3\",\"black\":\"#0A0B0B\",\"hp\":\"#C62E2E\",\"money\":\"#D6BB27\",\"hack\":\"#ADFF2F\",\"combat\":\"#E8EDCD\",\"cha\":\"#8B5FAF\",\"int\":\"#537CC8\",\"rep\":\"#E8EDCD\",\"disabled\":\"#5AB5A5\",\"backgroundprimary\":\"#0C0D0E\",\"backgroundsecondary\":\"#121415\",\"button\":\"#252829\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"19","AllGangsSave":"","LastExportBonus":"1658497886409","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}